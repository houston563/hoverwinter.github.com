<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Role Space]]></title>
  <subtitle><![CDATA[Carpela's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.carpela.me/"/>
  <updated>2016-05-11T12:56:48.000Z</updated>
  <id>http://blog.carpela.me/</id>
  
  <author>
    <name><![CDATA[Hover Winter]]></name>
    <email><![CDATA[hoverwinter@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[算法：UVa-OJ 815 flooded!]]></title>
    <link href="http://blog.carpela.me/2016/05/10/UVa815-flooded/"/>
    <id>http://blog.carpela.me/2016/05/10/UVa815-flooded/</id>
    <published>2016-05-10T12:22:23.000Z</published>
    <updated>2016-05-11T12:56:48.000Z</updated>
    <content type="html"><![CDATA[<p>本题是一道很简单的算法题。来源：ACM/ICPC World Finals 1999。</p>
<a id="more"></a>
<h2 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h2><h4 id="815_Flooded_21"><a href="#815_Flooded_21" class="headerlink" title="815 Flooded!"></a><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;category=10&amp;problem=756&amp;mosmsg=Submission+received+with+ID+17347095" target="_blank" rel="external">815 Flooded!</a></h4><p>To enable homebuyers to estimate the cost of flood insurance, a real-estate firm provides clients with the elevation of each 10-meter by 10-meter square of land in regions where homes may be purchased. Water from rain, melting snow, and burst water mains will collect first in those squares with the lowest elevations, since water from squares of higher elevation will run downhill. For simplicity, we also assume that storm sewers enable water from high-elevation squares in valleys (completely enclosed by still higher elevation squares) to drain to lower elevation squares, and that water will not be absorbed by the land.</p>
<p>From weather data archives, we know the typical volume of water that collects in a region. As prospective homebuyers, we wish to know the elevation of the water after it has collected in lowlying squares, and also the percentage of the region’s area that is completely submerged (that is, the percentage of 10-meter squares whose elevation is strictly less than the water level). You are to write the program that provides these results.</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The input consists of a sequence of region descriptions. Each begins with a pair of integers, m and n, each less than 30, giving the dimensions of the rectangular region in 10-meter units. Immediately following are m lines of n integers giving the elevations of the squares in row-major order. Elevations are given in meters, with positive and negative numbers representing elevations above and below sea level, respectively. The final value in each region description is an integer that indicates the number of cubic meters of water that will collect in the region. A pair of zeroes follows the description of the last region.</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>For each region, display the region number (1, 2, …), the water level (in meters above or below sea level) and the percentage of the region’s area under water, each on a separate line. The water level and percentage of the region’s area under water are to be displayed accurate to two fractional digits. Follow the output for each region with a blank line.</p>
<h4 id="Sample_Input"><a href="#Sample_Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><pre><code>3 3
25 37 45
51 12 34
94 83 27
10000
0 0
</code></pre><h4 id="Sample_Output"><a href="#Sample_Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><pre><code>Region 1
Water level is 46.67 meters.
66.67 percent of the region is under water.
</code></pre><h2 id="u95EE_u9898_u5206_u6790"><a href="#u95EE_u9898_u5206_u6790" class="headerlink" title="问题分析"></a>问题分析</h2><p>简单来说，有一块区域，划分为n<em>m(m,n&lt;=30)个面积为10</em>10 $m^2$的小方格，有着不同的海拔。输入区域的行数和列数，每一个小方格相对于水平面的海拔（负数表示低于水平面），以及该区域积水面积。求该区域水位的海拔，以及有积水的小方格的占比。</p>
<p>不同的小方格有不同海拔，低海拔的小方格会首先积满水，而高海拔不一定有积水。以示例数据为例：</p>
<p>积水的方块为 A={12, 25, 27, 34, 37, 45}. 容易验证 $\sum_{j \in A} (46.67-j)*100 = 100$</p>
<h2 id="u89E3_u51B3_u95EE_u9898"><a href="#u89E3_u51B3_u95EE_u9898" class="headerlink" title="解决问题"></a>解决问题</h2><p>如果讲海拔按照从小到大排列，如果积水高度小于某相邻两个元素，则后者一定不会积水。我们需要求出这个边界即可。</p>
<p>按照示例分析：</p>
<table>
<thead>
<tr>
<th style="text-align:center">可用积水高度</th>
<th style="text-align:center">高度差</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10000/100=100</td>
<td style="text-align:center">25-12=13</td>
</tr>
<tr>
<td style="text-align:center">100-13*1=87</td>
<td style="text-align:center">27-25=2</td>
</tr>
<tr>
<td style="text-align:center">87-2*2=83</td>
<td style="text-align:center">34-27=7</td>
</tr>
<tr>
<td style="text-align:center">83-7*3=62</td>
<td style="text-align:center">37-34=3</td>
</tr>
<tr>
<td style="text-align:center">62-3*4=50</td>
<td style="text-align:center">45-37=8</td>
</tr>
<tr>
<td style="text-align:center">50-8*5=10</td>
<td style="text-align:center">51-45=9</td>
</tr>
<tr>
<td style="text-align:center">10&lt;9*6</td>
<td style="text-align:center">10</td>
</tr>
</tbody>
</table>
<p>海拔高度 10.0/6+45 = 45.67</p>
<p>仔细重复以上过程，便很容易提出解决算法：</p>
<pre><code>Input: Region, m, n, water
1. sort(region) # order: ASC
2. index = 0, height = water/100.0
3. while index+1 &lt; m*n:
    a. inc = (index+1) * (region[index+1] - region[index])
    b. if height &lt; inc break
    c. height -= inc
    d. index++
4. return (height)/(index+1)+region[index]
</code></pre><h2 id="u5B9E_u73B0_u4EE3_u7801"><a href="#u5B9E_u73B0_u4EE3_u7801" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> region[<span class="number">900</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> len)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len-<span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> min = i;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;len; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[min]&gt;a[j])</span><br><span class="line">			&#123;</span><br><span class="line">				min = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(min!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = a[i];</span><br><span class="line">			a[i] = a[min];</span><br><span class="line">			a[min] = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,total,i;</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;	</span><br><span class="line">    	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line">    	<span class="keyword">if</span>(m==<span class="number">0</span>&amp;&amp;n==<span class="number">0</span>)</span><br><span class="line">    		<span class="keyword">break</span>;</span><br><span class="line">	   	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;m*n; i++)</span><br><span class="line">	   		<span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;region[i]);</span><br><span class="line">	   	sort(region, m*n);</span><br><span class="line">	   	<span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;total);</span><br><span class="line">	   	height = <span class="number">1.0</span>*total / <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	   	<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">	   	<span class="keyword">while</span>(index+<span class="number">1</span> &lt; m*n)</span><br><span class="line">	   	&#123;</span><br><span class="line">	   		</span><br><span class="line">	   		<span class="keyword">int</span> inc = (index+<span class="number">1</span>) * (region[index+<span class="number">1</span>] - region[index]);</span><br><span class="line">	   		<span class="keyword">if</span>(height &lt; inc)</span><br><span class="line">	   			<span class="keyword">break</span>;</span><br><span class="line">	   		height -= inc;</span><br><span class="line">	   		index ++;</span><br><span class="line">	   	&#125;</span><br><span class="line">	   	<span class="built_in">printf</span>(<span class="string">"Region %d\n"</span>, num++);</span><br><span class="line">	   	<span class="built_in">printf</span>(<span class="string">"Water level is %.2f meters.\n"</span>, height/(index+<span class="number">1</span>) + region[index]);</span><br><span class="line">	   	<span class="built_in">printf</span>(<span class="string">"%.2f percent of the region is under water.\n\n"</span>, <span class="number">100.0</span>*(index+<span class="number">1</span>)/(m*n));</span><br><span class="line">    &#125;</span><br><span class="line">   	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u95EE_u9898_u603B_u7ED3"><a href="#u95EE_u9898_u603B_u7ED3" class="headerlink" title="问题总结"></a>问题总结</h2><p>这道题是ACM Word Final题，但是并不难。理解问题即可很容易解决。本题还有很多种其他解决，可作为拓宽思维之用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本题是一道很简单的算法题。来源：ACM/ICPC World Finals 1999。</p>]]>
    
    </summary>
    
      <category term="算法" scheme="http://blog.carpela.me/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机科学经典学习资料]]></title>
    <link href="http://blog.carpela.me/2016/05/07/books/"/>
    <id>http://blog.carpela.me/2016/05/07/books/</id>
    <published>2016-05-07T09:59:23.000Z</published>
    <updated>2016-05-07T16:34:46.000Z</updated>
    <content type="html"><![CDATA[<p>经典图书及公开课整理</p>
<h3 id="u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u7840"><a href="#u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u7840" class="headerlink" title="机器学习的数学基础"></a>机器学习的数学基础</h3><ol>
<li>概率论与数理统计学以及其它统计学基础</li>
<li>扎实的线性代数功底</li>
<li>微积分（学习 实变函数 和 泛函分析 更好）</li>
</ol>
<h4 id="u9AD8_u7B49_u4EE3_u6570"><a href="#u9AD8_u7B49_u4EE3_u6570" class="headerlink" title="高等代数"></a>高等代数</h4><p>The Matrix Cookbook  Kaare Brandt Petersen</p>
<p>MIT的公开课 线性代数</p>
<h4 id="u6982_u7387_u8BBA_u4E0E_u6570_u7406_u7EDF_u8BA1"><a href="#u6982_u7387_u8BBA_u4E0E_u6570_u7406_u7EDF_u8BA1" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h4><p>John A. Rice 数理统计与数据分析</p>
<h4 id="u5FAE_u79EF_u5206"><a href="#u5FAE_u79EF_u5206" class="headerlink" title="微积分"></a>微积分</h4><p>微积分教程</p>
<h4 id="u6570_u636E_u6316_u6398"><a href="#u6570_u636E_u6316_u6398" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>Jiawei Han  数据挖掘概念与技术</p>
<p>lan H. Witten / Eibe Frank 数据挖掘实用机器学习技术 （入门推荐）</p>
<p>TOBY SEGARAN 集体智慧编程</p>
<p>Tom Mitchel 机器学习</p>
<p>进阶：</p>
<p>斯坦福  《机器学习》</p>
<p>书籍：</p>
<p>李航 统计学习方法</p>
<p>Richard O. Duda 模式分类</p>
<p>Christopher M. Bishop  Pattern Recognition and Machine learning</p>
<p>The Elements of Statistical learning  翻译很差 但是书是：入门到精通必读书籍</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>经典图书及公开课整理</p>
<h3 id="u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u7840"><a href="#u673A_u5668_u5B66_u4E60_u7684_u6570_u5B66_u57FA_u]]>
    </summary>
    
      <category term="公开课" scheme="http://blog.carpela.me/tags/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
      <category term="图书" scheme="http://blog.carpela.me/tags/%E5%9B%BE%E4%B9%A6/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人工神经网络(三) BP神经网络]]></title>
    <link href="http://blog.carpela.me/2016/05/07/bp-nn/"/>
    <id>http://blog.carpela.me/2016/05/07/bp-nn/</id>
    <published>2016-05-07T09:59:23.000Z</published>
    <updated>2016-05-07T11:57:32.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/thu539/archive/2013/05/22/3093214.html" target="_blank" rel="external">http://www.cnblogs.com/thu539/archive/2013/05/22/3093214.html</a></p>
<p><a href="http://briandolhansky.com/blog/2013/9/27/artificial-neural-networks-backpropagation-part-4" target="_blank" rel="external">http://briandolhansky.com/blog/2013/9/27/artificial-neural-networks-backpropagation-part-4</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.cnblogs.com/thu539/archive/2013/05/22/3093214.html" target="_blank" rel="external">http://www.cnblogs.com/thu539/arch]]>
    </summary>
    
      <category term="神经网络" scheme="http://blog.carpela.me/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="机器学习" scheme="http://blog.carpela.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人工神经网络(二) 感知器]]></title>
    <link href="http://blog.carpela.me/2016/05/06/perceptron/"/>
    <id>http://blog.carpela.me/2016/05/06/perceptron/</id>
    <published>2016-05-06T07:59:23.000Z</published>
    <updated>2016-05-07T11:57:54.000Z</updated>
    <content type="html"><![CDATA[<p>感知器是一种最简单的神经网络，用来解决有监督的二分类问题，即输入是否可以归于某一类别。作为简单的线性分类器，Minsky于上世纪60年代指出了它存在的缺陷：线性不可分问题。</p>
<a id="more"></a>
<h2 id="u5355_u5C42_u611F_u77E5_u5668_u5B66_u4E60"><a href="#u5355_u5C42_u611F_u77E5_u5668_u5B66_u4E60" class="headerlink" title="单层感知器学习"></a>单层感知器学习</h2><p>简单的单层感知器如下</p>
<p><img src="http://7xn88z.com1.z0.glb.clouddn.com/single-perceptron.jpg" alt="单层感知器"></p>
<p>它只有输入层和输出层(多输出)。它的激活函数通常为阈值函数，阈值为$\theta，也可以是连续的sigmoid函数。</p>
<span>$$f(x) = \begin{cases}
1, x &gt; \theta \\
0, x \le \theta
\end{cases}$$</span><!-- Has MathJax -->
<p>输入数据为 $ (\vec{x},\vec{y}) $，其中 $\vec{x}$ 为特征向量， $\vec{y}$ 为理论输出。我们需要训练 $\vec{w}$ 即权重矩阵。</p>
<p>当输出与分类器的预测输出之间的欧式距离小于给定的值后，即可认为完成训练。</p>
<p>$$<br>E = \frac{1}{2}\sum_{j=0}^{n}(y_j - o_j)^2<br>$$</p>
<p>其中$y_j$是理论输出，$o_j$是实际输出。</p>
<p>权值更新策略是：<span>$w_{ij} = w_{ij} + \alpha * (y_j - o_j) * x_i$</span><!-- Has MathJax -->，其中 $\alpha$ 是学习率。</p>
<p>当只有一个输出时，一般算法描述为：</p>
<pre><code>1. 初始化W和e, d, alpha
2. while d &gt; e
    2.1 d = 0
    2.2 for xi in X:
        2.2.1 oj = f(x*W)
        2.2.2 wij += alpha*(yj - oj)*xi
        2.2.3 d += (yj - oj)^2
    2.3 d = d/2
</code></pre><p>它的核心是：上述的<strong>权值的更新方式</strong>（梯度下降法)。对于单层感知器多输出的情况，权值为矩阵，需要对每一个输出按照上述方式更新权值。</p>
<h2 id="NAND__u4F8B_u5B50"><a href="#NAND__u4F8B_u5B50" class="headerlink" title="NAND 例子"></a>NAND 例子</h2><pre><code>设计一个感知器来学习 NAND 布尔函数，即 1 NAND 1 = 1，其它为0

输入：$x_0$, $x_1$, $x_2$，且 $x_0$ 始终为 1
阈值：0.5
学习率：0.1
训练数据集： {((1, 0, 0), 1), ((1, 0, 1), 1), ((1, 1, 0), 1), ((1, 1, 1), 0)}
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">RATE = <span class="number">0.1</span></span><br><span class="line">THRESHOLD = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threshold</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; THRESHOLD <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(x, y, w, e, f)</span>:</span></span><br><span class="line">	d = e + <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> d &gt; e:</span><br><span class="line">		d = <span class="number">0.0</span></span><br><span class="line">		<span class="keyword">for</span> index <span class="keyword">in</span> range(len(x)):</span><br><span class="line">			out = f(sum([ i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x[index],w)]))</span><br><span class="line">			<span class="keyword">print</span> w</span><br><span class="line">			<span class="keyword">for</span> indicator, value <span class="keyword">in</span> enumerate(x[index]):</span><br><span class="line">				w[indicator] += RATE * (y[index] - out) * value</span><br><span class="line">			d += (y[index] - out) ** <span class="number">2</span></span><br><span class="line">		d /= <span class="number">2</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">60</span></span><br><span class="line">	<span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x, w)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> threshold(sum([ i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(x,w)]))</span><br><span class="line"></span><br><span class="line">x = [ [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] ]</span><br><span class="line">y = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">w = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">w = train(x,y,w, <span class="number">0.01</span>, threshold)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> predict([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>], w)</span><br></pre></td></tr></table></figure>
<h2 id="u7EBF_u6027_u4E0D_u53EF_u5206_u95EE_u9898"><a href="#u7EBF_u6027_u4E0D_u53EF_u5206_u95EE_u9898" class="headerlink" title="线性不可分问题"></a>线性不可分问题</h2><p>当要设计一个 XOR 的感知器时，(0,0) (1,1)为0, (1,0) (0,1)为1。在平面坐标系中不存在一条直线把这四个点分成上述两类。这就表明了感知器的表达能力。为了解决这种问题，可以添加神经网络的层数。这便引出了BP神经网络。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感知器是一种最简单的神经网络，用来解决有监督的二分类问题，即输入是否可以归于某一类别。作为简单的线性分类器，Minsky于上世纪60年代指出了它存在的缺陷：线性不可分问题。</p>]]>
    
    </summary>
    
      <category term="神经网络" scheme="http://blog.carpela.me/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="机器学习" scheme="http://blog.carpela.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人工神经网络(一) 基本概念]]></title>
    <link href="http://blog.carpela.me/2016/05/05/artificial-neural-network-1-concepts/"/>
    <id>http://blog.carpela.me/2016/05/05/artificial-neural-network-1-concepts/</id>
    <published>2016-05-05T07:29:23.000Z</published>
    <updated>2016-05-07T11:57:15.000Z</updated>
    <content type="html"><![CDATA[<!-- toc -->
<p>人工神经网络(ANN)是一种十分流行的机器学习方法，有关于神经网络及深度学习的应用不胜枚举。本系列文章记录了人工神经网络的学习过程。</p>
<a id="more"></a>
<h2 id="u57FA_u672C_u4ECB_u7ECD"><a href="#u57FA_u672C_u4ECB_u7ECD" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>ANN是上个世纪中期提出来的一种人工智能方法，它是多学科交叉的典型代表。仿照生物神经网络的原理，人们希望机器能够获得一定的学习能力。而高中生物学的基本知识对于理解ANN的基本概念已经足够，并且ANN的演化早已超出了生物学的范畴。</p>
<h2 id="u6838_u5FC3_u6982_u5FF5"><a href="#u6838_u5FC3_u6982_u5FF5" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="u795E_u7ECF_u5143"><a href="#u795E_u7ECF_u5143" class="headerlink" title="神经元"></a>神经元</h3><p>从生物学中可知，不同神经元之间通过叫做突触的结构相互联接。每个神经元可以独立处理电化学信号：它接收从其它神经元来的信号，当信号达到某个阈值(threshold)后，它产生对这些输入信号的响应。而来自不同神经元的电化学信号对它产生的响应的影响不同，可以是促进或者抑制，并且影响程度也不同，这是由突触决定的，突触的“联接程度”越大影响越大，反之亦然。另外，“联接程度”是可以通过后天训练而改变，比如有关记忆力的神经元。</p>
<p>抛弃上述背景，对生物神经元进行抽象，得到的人工神经元 M-P 模型如下：</p>
<p><img src="http://7xn88z.com1.z0.glb.clouddn.com/neural-element.png" alt="神经元M-P模型"></p>
<p>它由三个部分组成：</p>
<ul>
<li>突触集（a set ofsynapses）：实际上就是该项输入的权重（weights）。</li>
<li>加法器（adder）：将加权后的输入进行求和，即：<span>$\sum_{j=1}^{m} x_{j} w_{kj}$</span><!-- Has MathJax -->，结果表示神经元的输入信号的累积效应，也叫该神经元的网络输入，用 net 表示。</li>
<li>激活函数（activation function）：作用于神经元的输出，一般是一个非线性函数。 另外，很多时候一个神经元还包含一个偏置项$b_k$。可用如下的数学表达式来刻画一个神经元：</li>
</ul>
<span>$$u_{k}=\sum_{j=1}^{m} x_{j} w_{kj}
\\
y_{k} = \varphi (u_{k} + b_{k})$$</span><!-- Has MathJax -->
<p>其中下标k表示第k个神经元。</p>
<h3 id="u7F51_u7EDC_u8F93_u5165"><a href="#u7F51_u7EDC_u8F93_u5165" class="headerlink" title="网络输入"></a>网络输入</h3><p>对于一个神经元而言，输入 $\vec{X} = (x_1,…,x_n)$，权值向量 $\vec{W} = (w_1,…,w_n)’$，那么它的网络输入net定义为：</p>
<span>$net = \vec{X}\cdot\vec{W}$</span><!-- Has MathJax -->
<h3 id="u6FC0_u6D3B_u51FD_u6570"><a href="#u6FC0_u6D3B_u51FD_u6570" class="headerlink" title="激活函数"></a>激活函数</h3><p>神经元获得网络输入后，应该产生相应的输出。而前面提到过，输入信号的累积效应超过一定阈值($\theta$)以后，它才处于激发态。但是为了使系统有更宽的适用性，该阈值在激活函数中体现。</p>
<p>常用的激活函数有以下几种：</p>
<h4 id="u7EBF_u6027_u51FD_u6570_28Linear_Function_29"><a href="#u7EBF_u6027_u51FD_u6570_28Linear_Function_29" class="headerlink" title="线性函数(Linear Function)"></a>线性函数(Linear Function)</h4><p>$$<br>f(net) = k * net + c<br>$$</p>
<p>它功能简单，会使神经网络功能退化，不常用。</p>
<h4 id="u659C_u9762_u51FD_u6570_28Ramp_Function_29"><a href="#u659C_u9762_u51FD_u6570_28Ramp_Function_29" class="headerlink" title="斜面函数(Ramp Function)"></a>斜面函数(Ramp Function)</h4><span>$$f(net) = 
\begin{cases}
\gamma,  &amp; \text{if $net \ge \theta$} \\
k * net, &amp; \text{if $|net| = \theta$}  \\
- \gamma, &amp; \text{if $net \le -\theta$}
\end{cases}$$</span><!-- Has MathJax -->
<h4 id="u9608_u503C_u51FD_u6570_28Threshold_Function_29"><a href="#u9608_u503C_u51FD_u6570_28Threshold_Function_29" class="headerlink" title="阈值函数(Threshold Function)"></a>阈值函数(Threshold Function)</h4><span>$$f(net) = 
\begin{cases}
\beta,  &amp; \text{if $net &gt; \theta$} \\
- \gamma, &amp; \text{if $net \le \theta$}
\end{cases}$$</span><!-- Has MathJax -->
<h4 id="s_u5F62_u51FD_u6570_28Logistic_Function_29"><a href="#s_u5F62_u51FD_u6570_28Logistic_Function_29" class="headerlink" title="s形函数(Logistic Function)"></a>s形函数(Logistic Function)</h4><p>$$<br>f(net) = a + \frac{b}{1 + e^{-d*net}}<br>$$</p>
<p>当 a = 0，b = 1, d = 1 时，就是 sigmoid 函数。</p>
<h4 id="tanh_u51FD_u6570"><a href="#tanh_u51FD_u6570" class="headerlink" title="tanh函数"></a>tanh函数</h4><p>$$<br>f(net) = tanh(net) = \frac{e^{net} - e^{-net}}{e^{net} + e^{-net}}<br>$$</p>
<h2 id="u795E_u7ECF_u7F51_u7EDC_u7684_u62D3_u6251_u7ED3_u6784"><a href="#u795E_u7ECF_u7F51_u7EDC_u7684_u62D3_u6251_u7ED3_u6784" class="headerlink" title="神经网络的拓扑结构"></a>神经网络的拓扑结构</h2><p>网络分层</p>
<p>联接的不同方式：</p>
<ol>
<li>层内</li>
<li>循环</li>
<li>层间，向前或者向后</li>
</ol>
<p>1：横向反馈，3向前为(层)前馈，向后为层反馈。横向反馈和层反馈统称反馈。</p>
<h3 id="u5355_u6781_u7F51"><a href="#u5355_u6781_u7F51" class="headerlink" title="单极网"></a>单极网</h3><h4 id="u7B80_u5355_u5355_u6781"><a href="#u7B80_u5355_u5355_u6781" class="headerlink" title="简单单极"></a>简单单极</h4><h4 id="u5355_u7EA7_u6A2A_u5411_u53CD_u9988_u7F51_u7EDC"><a href="#u5355_u7EA7_u6A2A_u5411_u53CD_u9988_u7F51_u7EDC" class="headerlink" title="单级横向反馈网络"></a>单级横向反馈网络</h4><h3 id="u591A_u7EA7_u7F51"><a href="#u591A_u7EA7_u7F51" class="headerlink" title="多级网"></a>多级网</h3><h3 id="u53CD_u9988_u7F51"><a href="#u53CD_u9988_u7F51" class="headerlink" title="反馈网"></a>反馈网</h3><h2 id="u5B58_u50A8_u4E0E_u6620_u5C04"><a href="#u5B58_u50A8_u4E0E_u6620_u5C04" class="headerlink" title="存储与映射"></a>存储与映射</h2><h2 id="u5B66_u4E60_u65B9_u5F0F"><a href="#u5B66_u4E60_u65B9_u5F0F" class="headerlink" title="学习方式"></a>学习方式</h2><h3 id="u76D1_u7763_u5B66_u4E60"><a href="#u76D1_u7763_u5B66_u4E60" class="headerlink" title="监督学习"></a>监督学习</h3><p>Hebb 学习率</p>
<h3 id="u975E_u76D1_u7763_u5B66_u4E60"><a href="#u975E_u76D1_u7763_u5B66_u4E60" class="headerlink" title="非监督学习"></a>非监督学习</h3><p>Delta</p>
]]></content>
    <summary type="html">
    <![CDATA[<!-- toc -->
<p>人工神经网络(ANN)是一种十分流行的机器学习方法，有关于神经网络及深度学习的应用不胜枚举。本系列文章记录了人工神经网络的学习过程。</p>]]>
    
    </summary>
    
      <category term="神经网络" scheme="http://blog.carpela.me/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="机器学习" scheme="http://blog.carpela.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《SICP》习题解答及笔记：第二章]]></title>
    <link href="http://blog.carpela.me/2016/03/10/solution-to-sicp-part-2/"/>
    <id>http://blog.carpela.me/2016/03/10/solution-to-sicp-part-2/</id>
    <published>2016-03-10T05:39:23.000Z</published>
    <updated>2016-03-29T07:33:45.000Z</updated>
    <content type="html"><![CDATA[<!-- TOC -->
<p>本人的SICP的习题解答，记录学习过程。简单的题目就忽略了。</p>
<a id="more"></a>
<h2 id="u7B2C_u4E8C_u7AE0__u6784_u9020_u6570_u636E_u62BD_u8C61"><a href="#u7B2C_u4E8C_u7AE0__u6784_u9020_u6570_u636E_u62BD_u8C61" class="headerlink" title="第二章 构造数据抽象"></a>第二章 构造数据抽象</h2><p>数据总是可以表示为一组构造和选择函数，并且使这些过程成为一套合法的表示所需要满足的条件。数据抽象的设计方法。数据的过程性表示：消息传递的程序设计风格。</p>
<h3 id="2-1__u6570_u636E_u62BD_u8C61_u5BFC_u5F15"><a href="#2-1__u6570_u636E_u62BD_u8C61_u5BFC_u5F15" class="headerlink" title="2.1 数据抽象导引"></a>2.1 数据抽象导引</h3><h4 id="ex2-1__u89C4_u8303_u5316make-rat"><a href="#ex2-1__u89C4_u8303_u5316make-rat" class="headerlink" title="ex2.1 规范化make-rat"></a>ex2.1 规范化make-rat</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-rat</span> n d)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> an <span class="list">(<span class="keyword">abs</span> n)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> ad <span class="list">(<span class="keyword">abs</span> d)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">g</span> <span class="list">(<span class="keyword">gcd</span> an ad)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">*</span> n d)</span> <span class="number">0</span>)</span> - +)</span> <span class="list">(<span class="keyword">/</span> an g)</span>)</span> <span class="list">(<span class="keyword">/</span> ad g)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-2__u7EBF_u6BB5_u8868_u793A"><a href="#ex2-2__u7EBF_u6BB5_u8868_u793A" class="headerlink" title="ex2.2 线段表示"></a>ex2.2 线段表示</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-point</span> x y)</span> <span class="list">(<span class="keyword">cons</span> x y)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">x-point</span> p)</span> <span class="list">(<span class="keyword">car</span> p)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">y-point</span> p)</span> <span class="list">(<span class="keyword">cdr</span> p)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-segment</span> a b)</span> <span class="list">(<span class="keyword">cons</span> a b)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">start-segment</span> s)</span> <span class="list">(<span class="keyword">car</span> s)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">end-segment</span> s)</span> <span class="list">(<span class="keyword">cdr</span> s)</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">midpoint-segment</span> s)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-point</span></span><br><span class="line">    <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">start-segment</span> s)</span>)</span> <span class="list">(<span class="keyword">x-point</span> <span class="list">(<span class="keyword">end-segment</span> s)</span>)</span>)</span> <span class="number">2</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">start-segment</span> s)</span>)</span> <span class="list">(<span class="keyword">y-point</span> <span class="list">(<span class="keyword">end-segment</span> s)</span>)</span>)</span> <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">print-point</span> p)</span></span><br><span class="line">  <span class="list">(<span class="keyword">newline</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">display</span> <span class="string">"("</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">display</span> <span class="list">(<span class="keyword">x-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">display</span> <span class="string">","</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">display</span> <span class="list">(<span class="keyword">y-point</span> p)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">display</span> <span class="string">")"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> a <span class="list">(<span class="keyword">make-point</span> <span class="number">1</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> b <span class="list">(<span class="keyword">make-point</span> <span class="number">3</span> <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> c <span class="list">(<span class="keyword">make-segment</span> a b)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">midpoint-segment</span> c)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-3__u5E73_u9762_u77E9_u5F62_u7684_u8868_u793A"><a href="#ex2-3__u5E73_u9762_u77E9_u5F62_u7684_u8868_u793A" class="headerlink" title="ex2.3 平面矩形的表示"></a>ex2.3 平面矩形的表示</h4><p>两种方式：长和宽；四个顶点</p>
<p>提供 length-of-rectangle  width-of-rectangle 函数来作为抽象屏障</p>
<p>具体代码没有太大挑战，略了</p>
<h4 id="ex2-4__u5E8F_u5BF9_u7684_u53E6_u4E00_u79CD_u8FC7_u7A0B_u6027_u8868_u793A"><a href="#ex2-4__u5E8F_u5BF9_u7684_u53E6_u4E00_u79CD_u8FC7_u7A0B_u6027_u8868_u793A" class="headerlink" title="ex2.4 序对的另一种过程性表示"></a>ex2.4 序对的另一种过程性表示</h4><p>直接代换即可证明</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cdr</span> z)</span></span><br><span class="line">  <span class="list">(<span class="keyword">z</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">p</span> q)</span> q)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-5__u5E8F_u5BF9_u7684_u6574_u6570_u8868_u793A"><a href="#ex2-5__u5E8F_u5BF9_u7684_u6574_u6570_u8868_u793A" class="headerlink" title="ex2.5 序对的整数表示"></a>ex2.5 序对的整数表示</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt-iter</span> b n val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> val)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? n)</span> <span class="list">(<span class="keyword">expt-iter</span> <span class="list">(<span class="keyword">*</span> b b)</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span> val)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">expt-iter</span> b <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword">*</span> val b)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt</span> b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">expt-iter</span> b n <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cons</span> a b)</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">expt</span> <span class="number">2</span> a)</span> <span class="list">(<span class="keyword">expt</span> <span class="number">3</span> b)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">car</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> a b)</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">val</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">expt</span> <span class="number">2</span> a)</span> <span class="list">(<span class="keyword">expt</span> <span class="number">3</span> b)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> val x)</span> a)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">&gt;</span> val x)</span> <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span> <span class="number">0</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">iter</span> a <span class="list">(<span class="keyword">+</span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> <span class="number">0</span> <span class="number">0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cdr</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> a b)</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">val</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">expt</span> <span class="number">2</span> a)</span> <span class="list">(<span class="keyword">expt</span> <span class="number">3</span> b)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> val x)</span> b)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">&gt;</span> val x)</span> <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">+</span> a <span class="number">1</span>)</span> <span class="number">0</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">iter</span> a <span class="list">(<span class="keyword">+</span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> <span class="number">0</span> <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-6_Church_u8BA1_u6570"><a href="#ex2-6_Church_u8BA1_u6570" class="headerlink" title="ex2.6 Church计数"></a>ex2.6 Church计数</h4><p>代入可知：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> one <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> two <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>容易猜测 three, four为依次多了个(f xx)，所以加法中，加1最外圈是一个f，加n就是最外圈产生n个f，而(m f)就是</p>
<p>(lambda (x) (f (f …(f x)))) 共m个f</p>
<p>将((n f) x)作为上面的x代入即是n+m结果。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">add</span> m n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">f</span>)</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="list">(<span class="keyword">m</span> f)</span> <span class="list">(<span class="list">(<span class="keyword">n</span> f)</span> x)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-7__u533A_u95F4_u57FA_u672C_u64CD_u4F5C"><a href="#ex2-7__u533A_u95F4_u57FA_u672C_u64CD_u4F5C" class="headerlink" title="ex2.7 区间基本操作"></a>ex2.7 区间基本操作</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">upper-bound</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cdr</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">lower-bound</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-8__u533A_u95F4_u76F8_u51CF"><a href="#ex2-8__u533A_u95F4_u76F8_u51CF" class="headerlink" title="ex2.8 区间相减"></a>ex2.8 区间相减</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sub-interval</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">lower-bound</span> x)</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-9__u533A_u95F4_u5BBD_u5EA6"><a href="#ex2-9__u533A_u95F4_u5BBD_u5EA6" class="headerlink" title="ex2.9 区间宽度"></a>ex2.9 区间宽度</h4><p>令 m:(a b) n:(c d) 表示两个区间：</p>
<p>m+n = (a+c b+d)</p>
<p>width(m+n) = (b+d - (a+c))/2 = (b-a)/2 + (d-c)/2 = width(m)+width(n)</p>
<p>m-n = (a-d b-c)</p>
<p>width(m-n) = (b-c - (a-d))/2 = (b-a)/2 - (d-c)/2 = width(m)-width(n)</p>
<p>m:(3 4) n:(1 2)</p>
<p>m/n = (1.5 4) width(m)/width(n) = 1 ≠ width(m/n) = 1.25</p>
<p>m<em>n = (3 8) width(m)</em>width(n) = 1 ≠ width(m*n) = 2.5</p>
<h4 id="ex2-10__u88AB_u9664_u533A_u95F4_u5305_u542B0"><a href="#ex2-10__u88AB_u9664_u533A_u95F4_u5305_u542B0" class="headerlink" title="ex2.10 被除区间包含0"></a>ex2.10 被除区间包含0</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">div-interval</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&lt;=</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">error</span> <span class="string">"Interval contains 0"</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">mul-interval</span> x <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span>)</span> <span class="list">(<span class="keyword">/</span> <span class="number">1</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-11__u533A_u95F4_u4E58_u6CD5_u4F18_u5316"><a href="#ex2-11__u533A_u95F4_u4E58_u6CD5_u4F18_u5316" class="headerlink" title="ex2.11 区间乘法优化"></a>ex2.11 区间乘法优化</h4><p>题目表述有点问题。按照每个区间和0之间关系，有一种情况必定要算4次乘法，而其他的是两次。</p>
<p>不妨令 m:(a b) n:(c d) 表示两个区间，a0b表示0和两个区间大小关系：a &lt; 0 &lt; b</p>
<table>
<thead>
<tr>
<th></th>
<th>0cd</th>
<th>c0d</th>
<th>cd0</th>
</tr>
</thead>
<tbody>
<tr>
<td>0ab</td>
<td>(ac,bd)</td>
<td>(bc,bd)</td>
<td>(bc,ad)</td>
</tr>
<tr>
<td>a0b</td>
<td>(ad,bd)</td>
<td>(min(ad,bc),max(ac,bd))</td>
<td>(bc,ac)</td>
</tr>
<tr>
<td>ab0</td>
<td>(ad,bc)</td>
<td>(ad,ac)</td>
<td>(bd,ac)</td>
</tr>
</tbody>
</table>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">mul-interval</span> x y)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">a</span> <span class="list">(<span class="keyword">lower-bound</span> y)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">b</span> <span class="list">(<span class="keyword">upper-bound</span> y)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">c</span> <span class="list">(<span class="keyword">lower-bound</span> x)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">d</span> <span class="list">(<span class="keyword">upper-bound</span> x)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&gt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> c <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> a c)</span> <span class="list">(<span class="keyword">*</span> b d)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&gt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> c <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> b c)</span> <span class="list">(<span class="keyword">*</span> b d)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&gt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> b c)</span> <span class="list">(<span class="keyword">*</span> a d)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> c <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> a d)</span> <span class="list">(<span class="keyword">*</span> b d)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> c <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">min</span> <span class="list">(<span class="keyword">*</span> a d)</span> <span class="list">(<span class="keyword">*</span> b c)</span>)</span> <span class="list">(<span class="keyword">max</span> <span class="list">(<span class="keyword">*</span> a c)</span> <span class="list">(<span class="keyword">*</span> b d)</span>)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> a <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> b c)</span> <span class="list">(<span class="keyword">*</span> a c)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> c <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> a d)</span> <span class="list">(<span class="keyword">*</span> b c)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> c <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&gt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> a d)</span> <span class="list">(<span class="keyword">*a</span> c)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;=</span> b <span class="number">0</span>)</span> <span class="list">(<span class="keyword">&lt;=</span> d <span class="number">0</span>)</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">*</span> b d)</span> <span class="list">(<span class="keyword">*</span> a c)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-12__u4E2D_u5FC3_u70B9_u767E_u5206_u6BD4_u5B9A_u4E49_u533A_u95F4"><a href="#ex2-12__u4E2D_u5FC3_u70B9_u767E_u5206_u6BD4_u5B9A_u4E49_u533A_u95F4" class="headerlink" title="ex2.12 中心点百分比定义区间"></a>ex2.12 中心点百分比定义区间</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-center-percent</span> c p)</span></span><br><span class="line">  <span class="list">(<span class="keyword">make-interval</span> <span class="list">(<span class="keyword">-</span> c <span class="list">(<span class="keyword">*</span> c p)</span>)</span> <span class="list">(<span class="keyword">+</span> c <span class="list">(<span class="keyword">*</span> c p)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">center</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="list">(<span class="keyword">lower-bound</span> x)</span>)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">percent</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">upper-bound</span> x)</span> <span class="list">(<span class="keyword">lower-bound</span> x)</span>)</span> <span class="number">2</span> <span class="list">(<span class="keyword">center</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-13__u4E58_u79EF_u8BEF_u5DEE_u767E_u5206_u6BD4"><a href="#ex2-13__u4E58_u79EF_u8BEF_u5DEE_u767E_u5206_u6BD4" class="headerlink" title="ex2.13 乘积误差百分比"></a>ex2.13 乘积误差百分比</h4><p>不妨令 m:[a p] n:[b q] , a,b&gt;0 那么：</p>
<p>  m<em>n = ((a-ap)</em>(b-bq) (a+ap)*(b+bq))<br>      = (ab-abq-abp+abpq, ab+abq+abp+abpq)<br>      = (ab+abpq - ab(p+q), ab+abpq + ab(p+q))<br>      = [ab(1+pq) (p+q)]</p>
<p>新的误差百分比 (p+q)</p>
<h4 id="ex2-14__u533A_u95F4_u9664_u6CD5_u95EE_u9898"><a href="#ex2-14__u533A_u95F4_u9664_u6CD5_u95EE_u9898" class="headerlink" title="ex2.14 区间除法问题"></a>ex2.14 区间除法问题</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> a <span class="list">(<span class="keyword">make-interval</span> <span class="number">1.0</span> <span class="number">2.0</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> b <span class="list">(<span class="keyword">make-interval</span> <span class="number">3.0</span> <span class="number">4.0</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">par1</span> a b)</span> <span class="comment">;(0.5, 2.0)</span></span><br><span class="line"><span class="list">(<span class="keyword">par2</span> a b)</span> <span class="comment">;(0.75, 1.3333333333)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> m <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">5</span> <span class="number">0.0001</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> n <span class="list">(<span class="keyword">make-center-percent</span> <span class="number">8</span> <span class="number">0.000001</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">par1</span> m n)</span> <span class="comment">;(3.076492088, 3.077354099)</span></span><br><span class="line"><span class="list">(<span class="keyword">par2</span> m n)</span> <span class="comment">;(3.076732537, 3.077113602)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">div-interval</span> b b)</span>  <span class="comment">;(0.75, 1.333333)</span></span><br><span class="line"><span class="list">(<span class="keyword">div-interval</span> b a)</span>  <span class="comment">;(1.5, 4.0)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-15__u5E76_u8054_u7535_u963B_u66F4_u597D_u7684_u516C_u5F0F"><a href="#ex2-15__u5E76_u8054_u7535_u963B_u66F4_u597D_u7684_u516C_u5F0F" class="headerlink" title="ex2.15 并联电阻更好的公式"></a>ex2.15 并联电阻更好的公式</h4><p>注意到 A/A != 1 而是一个区间：</p>
<p>  R1R2/(R1+R2)=1/(R1/R1R2+ R2/R1R2)!=1/(1/R2+1/R1)</p>
<p>所以减少非确定量的使用可以提高精度，Eva的说法是正确的。</p>
<h4 id="ex2-16__u65E0_u7F3A_u9677_u7684_u533A_u95F4_u7B97_u672F_u5305"><a href="#ex2-16__u65E0_u7F3A_u9677_u7684_u533A_u95F4_u7B97_u672F_u5305" class="headerlink" title="ex2.16 无缺陷的区间算术包"></a>ex2.16 无缺陷的区间算术包</h4><p>解释如上题。要解决这个问题，要确保同一个区间相除结果为1。</p>
<p><strong><em>具体实现仍在构思中</em></strong></p>
<h3 id="2-2__u5C42_u6B21_u6027_u6570_u636E_u548C_u95ED_u5305_u6027_u8D28"><a href="#2-2__u5C42_u6B21_u6027_u6570_u636E_u548C_u95ED_u5305_u6027_u8D28" class="headerlink" title="2.2 层次性数据和闭包性质"></a>2.2 层次性数据和闭包性质</h3><p>带点尾部记法形式的define：表示任意个数的参数。</p>
<h4 id="ex2-17_last-pair_u8FC7_u7A0B"><a href="#ex2-17_last-pair_u8FC7_u7A0B" class="headerlink" title="ex2.17 last-pair过程"></a>ex2.17 last-pair过程</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">last-pair</span> list1)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? <span class="list">(<span class="keyword">cdr</span> list1)</span>)</span></span><br><span class="line">    list1</span><br><span class="line">    <span class="list">(<span class="keyword">last-pair</span> <span class="list">(<span class="keyword">cdr</span> list1)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-18_reverse_u8FC7_u7A0B"><a href="#ex2-18_reverse_u8FC7_u7A0B" class="headerlink" title="ex2.18 reverse过程"></a>ex2.18 reverse过程</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">reverse</span> list1)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? <span class="list">(<span class="keyword">cdr</span> list1)</span>)</span></span><br><span class="line">    list1</span><br><span class="line">    <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">reverse</span> <span class="list">(<span class="keyword">cdr</span> list1)</span>)</span> <span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">car</span> list1)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-19__u65B0_u7684_u5151_u6362_u96F6_u94B1"><a href="#ex2-19__u65B0_u7684_u5151_u6362_u96F6_u94B1" class="headerlink" title="ex2.19 新的兑换零钱"></a>ex2.19 新的兑换零钱</h4><p>表的排列不会造成影响，只是相当于把递归树的形状改变了，树的深度和节点数都没变化。也就是说，兑换零钱的种类数和先兑换哪种硬币无关。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">no-more</span>? x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">null</span>? x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">first-denomination</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">except-first-denomination</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cdr</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-20__u76F8_u540C_u5947_u5076_u6027"><a href="#ex2-20__u76F8_u540C_u5947_u5076_u6027" class="headerlink" title="ex2.20 相同奇偶性"></a>ex2.20 相同奇偶性</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">same-parity</span> a . b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">same-parity-iter</span> l p? val)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? l)</span></span><br><span class="line">        val</span><br><span class="line">        <span class="list">(<span class="keyword">same-parity-iter</span> <span class="list">(<span class="keyword">cdr</span> l)</span> p?</span><br><span class="line">          <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">p</span>? <span class="list">(<span class="keyword">car</span> l)</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> l)</span> val)</span></span><br><span class="line">            val)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">same-parity-iter</span> b <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">even</span>? a)</span> even? odd?)</span> <span class="quoted">'()</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-21_square-list"><a href="#ex2-21_square-list" class="headerlink" title="ex2.21 square-list"></a>ex2.21 square-list</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square-list</span> items)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? items)</span></span><br><span class="line">    <span class="quoted">'()</span></span><br><span class="line">    <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">car</span> items)</span> <span class="list">(<span class="keyword">car</span> items)</span>)</span> <span class="list">(<span class="keyword">square-list</span> <span class="list">(<span class="keyword">cdr</span> items)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square-list</span> items)</span></span><br><span class="line">  <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">*</span> x x)</span>)</span> items)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-22__u751F_u6210_u8868_u9012_u5F52_u8FC7_u7A0B_u5BF9_u5E94_u7684_u8FED_u4EE3"><a href="#ex2-22__u751F_u6210_u8868_u9012_u5F52_u8FC7_u7A0B_u5BF9_u5E94_u7684_u8FED_u4EE3" class="headerlink" title="ex2.22 生成表递归过程对应的迭代"></a>ex2.22 生成表递归过程对应的迭代</h4><p>上一题目中使用的迭代过程也会产生这样的结果，因为每一次迭代都是往表头添加东西</p>
<p>修改之后answer本身是一个列表，(cons listp element)结果不是list</p>
<p>可以的办法是迭代中使用append过程，这样效率不高，在输入或输出时使用reverse即可。</p>
<h4 id="ex2-23_for-each"><a href="#ex2-23_for-each" class="headerlink" title="ex2.23 for-each"></a>ex2.23 for-each</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(define (for-each f items)&#10;  (f (car items))&#10;  (if (null? (cdr items))&#10;    &#39;done&#10;    (for-each f (cdr items))))</span><br></pre></td></tr></table></figure>
<h4 id="ex2-24__u76D2_u5B50_u7ED3_u6784"><a href="#ex2-24__u76D2_u5B50_u7ED3_u6784" class="headerlink" title="ex2.24 盒子结构"></a>ex2.24 盒子结构</h4><p>结果是 (1 (2 (3 4)))</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      (1 (2 (3 4)))</span><br><span class="line">    /              \        </span><br><span class="line">1               (2 (3 4))</span><br><span class="line">             /         \</span><br><span class="line">          2            (3 4)</span><br><span class="line">                     /      \</span><br><span class="line">                    3        4</span><br></pre></td></tr></table></figure>
<h4 id="ex2-25__u53D6_u503C"><a href="#ex2-25__u53D6_u503C" class="headerlink" title="ex2.25 取值"></a>ex2.25 取值</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> items <span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">3</span> <span class="list">(<span class="keyword">list</span> <span class="number">5</span> <span class="number">7</span>)</span> <span class="number">9</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">cdr</span> items)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> items <span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">list</span> <span class="number">7</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">car</span> items)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> items <span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="list">(<span class="keyword">list</span> <span class="number">2</span> <span class="list">(<span class="keyword">list</span> <span class="number">3</span> <span class="list">(<span class="keyword">list</span> <span class="number">4</span> <span class="list">(<span class="keyword">list</span> <span class="number">5</span> <span class="list">(<span class="keyword">list</span> <span class="number">6</span> <span class="number">7</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> items)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-26_cons/append/list"><a href="#ex2-26_cons/append/list" class="headerlink" title="ex2.26 cons/append/list"></a>ex2.26 cons/append/list</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> x <span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> y <span class="list">(<span class="keyword">list</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">append</span> x y)</span> <span class="comment">;(1 2 3 4 5 6)</span></span><br><span class="line"><span class="list">(<span class="keyword">cons</span> x y)</span> <span class="comment">;((1 2 3) 4 5 6)</span></span><br><span class="line"><span class="list">(<span class="keyword">list</span> x y)</span> <span class="comment">;((1 2 3) (4 5 6))</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-27_deep-reverse"><a href="#ex2-27_deep-reverse" class="headerlink" title="ex2.27 deep-reverse"></a>ex2.27 deep-reverse</h4><p>原理和reverse类似，只不过把 (car items) 部分也reverse一下</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">deep-reverse</span> items)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? items)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? items)</span>)</span> items)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">deep-reverse</span> <span class="list">(<span class="keyword">cdr</span> items)</span>)</span> <span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">deep-reverse</span> <span class="list">(<span class="keyword">car</span> items)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">append</span> list1 list2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? list1)</span></span><br><span class="line">    list2</span><br><span class="line">    <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> list1)</span> <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">cdr</span> list1)</span> list2)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> x <span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">list</span> <span class="number">3</span> <span class="number">4</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> y <span class="list">(<span class="keyword">list</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">deep-reverse</span> x)</span></span><br><span class="line"><span class="list">(<span class="keyword">deep-reverse</span> y)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-28__u8F93_u51FA_u53F6_u5B50_u8282_u70B9"><a href="#ex2-28__u8F93_u51FA_u53F6_u5B50_u8282_u70B9" class="headerlink" title="ex2.28 输出叶子节点"></a>ex2.28 输出叶子节点</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fringe</span> items)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? items)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? items)</span>)</span> <span class="list">(<span class="keyword">list</span> items)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">fringe</span> <span class="list">(<span class="keyword">car</span> items)</span>)</span> <span class="list">(<span class="keyword">fringe</span> <span class="list">(<span class="keyword">cdr</span> items)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-29__u4E8C_u53C9_u6D3B_u52A8_u4F53"><a href="#ex2-29__u4E8C_u53C9_u6D3B_u52A8_u4F53" class="headerlink" title="ex2.29 二叉活动体"></a>ex2.29 二叉活动体</h4><p>a,b,c:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">left-branch</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">right-branch</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">branch-length</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">branch-structure</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">car</span> <span class="list">(<span class="keyword">cdr</span> x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">total-weight</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? x)</span>)</span></span><br><span class="line">    x</span><br><span class="line">    <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">total-weight</span> <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">left-branch</span> x)</span>)</span>)</span> <span class="list">(<span class="keyword">total-weight</span> <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">right-branch</span> x)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">balance</span>? x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? x)</span>)</span></span><br><span class="line">    #t</span><br><span class="line">    <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">branch-length</span> <span class="list">(<span class="keyword">left-branch</span> x)</span>)</span> <span class="list">(<span class="keyword">total-weight</span> <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">left-branch</span> x)</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">branch-length</span> <span class="list">(<span class="keyword">right-branch</span> x)</span>)</span> <span class="list">(<span class="keyword">total-weight</span> <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">right-branch</span> x)</span>)</span>)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">balance</span>? <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">right-branch</span> x)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">balance</span>? <span class="list">(<span class="keyword">branch-structure</span> <span class="list">(<span class="keyword">left-branch</span> x)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>d: 只需修改branch-structure和right-branch即可</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">right-branch</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cdr</span> x)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">branch-structure</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cdr</span> x)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-30_square-tree"><a href="#ex2-30_square-tree" class="headerlink" title="ex2.30 square-tree"></a>ex2.30 square-tree</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square-tree</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? x)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? <span class="list">(<span class="keyword">*</span> x x)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">square-tree</span> <span class="list">(<span class="keyword">car</span> x)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">square-tree</span> <span class="list">(<span class="keyword">cdr</span> x)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square-tree</span> tree)</span></span><br><span class="line">  <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">sub-tree</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">pair</span>? sub-tree)</span></span><br><span class="line">      <span class="list">(<span class="keyword">square-tree</span> sub-tree)</span></span><br><span class="line">      <span class="list">(<span class="keyword">*</span> sub-tree sub-tree)</span>)</span>)</span> tree)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-31_tree-map"><a href="#ex2-31_tree-map" class="headerlink" title="ex2.31 tree-map"></a>ex2.31 tree-map</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">tree-map</span> func tree)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? tree)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">pair</span>? tree)</span>)</span> <span class="list">(<span class="keyword">func</span> tree)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">tree-map</span> func <span class="list">(<span class="keyword">car</span> tree)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">tree-map</span> func <span class="list">(<span class="keyword">cdr</span> tree)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-32__u5B50_u96C6"><a href="#ex2-32__u5B50_u96C6" class="headerlink" title="ex2.32 子集"></a>ex2.32 子集</h4><p>子集由除第一个元素外所有元素构成的子集，和第一个元素构成的集合与这些集合的并形成的</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">subsets</span> s)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? s)</span></span><br><span class="line">    <span class="list">(<span class="keyword">list</span> <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">rest</span> <span class="list">(<span class="keyword">subsets</span> <span class="list">(<span class="keyword">cdr</span> s)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">append</span> rest <span class="list">(<span class="keyword">map</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">list</span> <span class="list">(<span class="keyword">car</span> s)</span>)</span> x)</span>)</span></span><br><span class="line">      rest)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-33__u7528_u7D2F_u79EF_u8868_u793A_u7684_u8868_u57FA_u672C_u64CD_u4F5C"><a href="#ex2-33__u7528_u7D2F_u79EF_u8868_u793A_u7684_u8868_u57FA_u672C_u64CD_u4F5C" class="headerlink" title="ex2.33 用累积表示的表基本操作"></a>ex2.33 用累积表示的表基本操作</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">map</span> p sequence)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span></span><br><span class="line">    <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span> y)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">p</span> x)</span> y)</span>)</span></span><br><span class="line">   <span class="quoted">'()</span> sequence)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">append</span> seq1 seq2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> cons seq2 seq1)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">length</span> sequence)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span></span><br><span class="line">    <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span> y)</span></span><br><span class="line">        <span class="list">(<span class="keyword">+</span> <span class="number">1</span> y)</span>)</span> <span class="number">0</span> sequence)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-34__u6D77_u4F26_u516C_u5F0F_u7684_u7D2F_u79EF_u5F62_u5F0F"><a href="#ex2-34__u6D77_u4F26_u516C_u5F0F_u7684_u7D2F_u79EF_u5F62_u5F0F" class="headerlink" title="ex2.34 海伦公式的累积形式"></a>ex2.34 海伦公式的累积形式</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">honer-eval</span> x coefficient-sequence)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">this-coeff</span> higher-terms)</span></span><br><span class="line">    <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> x higher-terms)</span> this-coeff)</span>)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      coefficient-sequence)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-35_count-leaves_u7684_u7D2F_u79EF_u5F62_u5F0F"><a href="#ex2-35_count-leaves_u7684_u7D2F_u79EF_u5F62_u5F0F" class="headerlink" title="ex2.35 count-leaves的累积形式"></a>ex2.35 count-leaves的累积形式</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">count-leaves</span> <span class="literal">t</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span></span><br><span class="line">    <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span> y)</span></span><br><span class="line">      <span class="list">(<span class="keyword">+</span> <span class="number">1</span> y)</span>)</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> x)</span> <span class="list">(<span class="keyword">enumerate-leaves</span> <span class="literal">t</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-36_accumulate-n"><a href="#ex2-36_accumulate-n" class="headerlink" title="ex2.36 accumulate-n"></a>ex2.36 accumulate-n</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">accumulate-n</span> op init seqs)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? <span class="list">(<span class="keyword">car</span> seqs)</span>)</span></span><br><span class="line">    <span class="quoted">'()</span></span><br><span class="line">    <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">accumulate</span> op init <span class="list">(<span class="keyword">map</span> car seqs)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">accumulate-n</span> op init <span class="list">(<span class="keyword">map</span> cdr seqs)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-37_Matrix_u8FD0_u7B97_u7684_u7D2F_u79EF_u5F62_u5F0F"><a href="#ex2-37_Matrix_u8FD0_u7B97_u7684_u7D2F_u79EF_u5F62_u5F0F" class="headerlink" title="ex2.37 Matrix运算的累积形式"></a>ex2.37 Matrix运算的累积形式</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">matrix-*-vector</span> m v)</span></span><br><span class="line">  <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">accumulate</span> + <span class="number">0</span> <span class="list">(<span class="keyword">accumulate-n</span> <span class="variable">* 1 (list x v)))) m))</span><br><span class="line"></span><br><span class="line">(define (transpose mat)</span><br><span class="line">  (accumulate-n cons '() mat))</span><br><span class="line"></span><br><span class="line">(define (matrix-*</span>-matrix m n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">cols</span> <span class="list">(<span class="keyword">transpose</span> n)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">map</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">matrix-*-vector</span> cols x)</span>)</span></span><br><span class="line">      m)</span>)</span>)</span></span></span></span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-38_fold-left_u4E0Efold-right"><a href="#ex2-38_fold-left_u4E0Efold-right" class="headerlink" title="ex2.38 fold-left与fold-right"></a>ex2.38 fold-left与fold-right</h4><p>3/2, 1/6, (1 (2 (3 ()))), (((() 1) 2) 3)</p>
<p>满足结合率，或者产生相同的计算序列(如ex2.39)</p>
<h4 id="ex2-39_reverse_u5B9A_u4E49"><a href="#ex2-39_reverse_u5B9A_u4E49" class="headerlink" title="ex2.39 reverse定义"></a>ex2.39 reverse定义</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">reverse</span> sequence)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span> y)</span> <span class="list">(<span class="keyword">append</span> y <span class="list">(<span class="keyword">list</span> x)</span>)</span>)</span> <span class="quoted">'()</span> sequence)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">reverse</span> sequence)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fold-left</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span> y)</span> <span class="list">(<span class="keyword">append</span> <span class="list">(<span class="keyword">list</span> y)</span> x)</span>)</span> <span class="quoted">'()</span> sequence)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-40_unique-pair"><a href="#ex2-40_unique-pair" class="headerlink" title="ex2.40 unique-pair"></a>ex2.40 unique-pair</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">unique-pairs</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> append <span class="quoted">'()</span></span><br><span class="line">      <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">j</span>)</span> <span class="list">(<span class="keyword">list</span> i j)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> <span class="list">(<span class="keyword">-</span> i <span class="number">1</span>)</span>)</span>)</span>)</span> <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> n)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">prime-sum</span>? pair)</span></span><br><span class="line">  <span class="list">(<span class="keyword">prime</span>? <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">car</span> pair)</span> <span class="list">(<span class="keyword">cadr</span> pair)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">prime-sum-pairs</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> cons <span class="quoted">'()</span> <span class="list">(<span class="keyword">filter</span> prime-sum? <span class="list">(<span class="keyword">unique-pairs</span> n)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-41__u548C_u4E3A_u5B9A_u503C_u7684_u76F8_u5F02_u4E09_u5143_u7EC4"><a href="#ex2-41__u548C_u4E3A_u5B9A_u503C_u7684_u76F8_u5F02_u4E09_u5143_u7EC4" class="headerlink" title="ex2.41 和为定值的相异三元组"></a>ex2.41 和为定值的相异三元组</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum-eq-s</span>? s)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">null</span>? x)</span>)</span> <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">car</span> x)</span> <span class="list">(<span class="keyword">cadr</span> x)</span> <span class="list">(<span class="keyword">caddr</span> x)</span>)</span> s)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">unique-tribles</span> n s)</span></span><br><span class="line">  <span class="list">(<span class="keyword">filter</span> <span class="list">(<span class="keyword">sum-eq-s</span>? s)</span></span><br><span class="line">  <span class="list">(<span class="keyword">flatmap</span></span><br><span class="line">    <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">flatmap</span></span><br><span class="line">        <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">j</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">map</span></span><br><span class="line">            <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">k</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=</span> i j)</span> <span class="list">(<span class="keyword">=</span> j k)</span> <span class="list">(<span class="keyword">=</span> i k)</span>)</span>)</span></span><br><span class="line">                <span class="list">(<span class="keyword">list</span> i j k)</span></span><br><span class="line">                <span class="quoted">'()</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> n)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> n)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> n)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-42__u516B_u7687_u540E_u95EE_u9898"><a href="#ex2-42__u516B_u7687_u540E_u95EE_u9898" class="headerlink" title="ex2.42 八皇后问题"></a>ex2.42 八皇后问题</h4><p>使用(1 2…)表示棋盘，其中第n列的数字m表示皇后在(m,n)位置</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> empty-board <span class="quoted">'()</span> )</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">adjoin-position</span> new-row k rest-of-queens)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cons</span> new-row rest-of-queens)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">safe</span>? k position)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> new-queue for-check i)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">null</span>? for-check)</span></span><br><span class="line">      #t</span><br><span class="line">      <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">current</span> <span class="list">(<span class="keyword">car</span> for-check)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=</span> current new-queue)</span></span><br><span class="line">          <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">-</span> current i)</span> new-queue)</span></span><br><span class="line">          <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">+</span> current i)</span> new-queue)</span>)</span></span><br><span class="line">          #f</span><br><span class="line">          <span class="list">(<span class="keyword">iter</span> new-queue <span class="list">(<span class="keyword">cdr</span> for-check)</span> <span class="list">(<span class="keyword">+</span> i <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">car</span> position)</span> <span class="list">(<span class="keyword">cdr</span> position)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">queens</span> board-size)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">queen-cols</span> k)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">=</span> k <span class="number">0</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">list</span> empty-board)</span></span><br><span class="line">      <span class="list">(<span class="keyword">filter</span></span><br><span class="line">        <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">position</span>)</span> <span class="list">(<span class="keyword">safe</span>? k position)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">flatmap</span></span><br><span class="line">          <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">rest-of-queens</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">map</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">new-row</span>)</span></span><br><span class="line">              <span class="list">(<span class="keyword">adjoin-position</span> new-row k rest-of-queens)</span>)</span></span><br><span class="line">                <span class="list">(<span class="keyword">enumerate-interval</span> <span class="number">1</span> board-size)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">queen-cols</span> <span class="list">(<span class="keyword">-</span> k <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">queen-cols</span> board-size)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-43__u4EA4_u6362_u540E_u65F6_u95F4_u590D_u6742_u5EA6"><a href="#ex2-43__u4EA4_u6362_u540E_u65F6_u95F4_u590D_u6742_u5EA6" class="headerlink" title="ex2.43 交换后时间复杂度"></a>ex2.43 交换后时间复杂度</h4><p>有疑问 bsize*T</p>
<h4 id="ex2-44-ex2-52"><a href="#ex2-44-ex2-52" class="headerlink" title="ex2.44-ex2.52"></a>ex2.44-ex2.52</h4><h3 id="u7B26_u53F7_u6570_u636E"><a href="#u7B26_u53F7_u6570_u636E" class="headerlink" title="符号数据"></a>符号数据</h3><h4 id="ex2-54_equal_3F_u5B9A_u4E49"><a href="#ex2-54_equal_3F_u5B9A_u4E49" class="headerlink" title="ex2.54 equal?定义"></a>ex2.54 equal?定义</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">equal</span>? sym1 sym2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">pair</span>? sym1)</span> <span class="list">(<span class="keyword">pair</span>? sym2)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">equal</span>? <span class="list">(<span class="keyword">car</span> sym1)</span> <span class="list">(<span class="keyword">car</span> sym2)</span>)</span> <span class="list">(<span class="keyword">equal</span>? <span class="list">(<span class="keyword">cdr</span> sym1)</span> <span class="list">(<span class="keyword">cdr</span> sym2)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">eq</span>? sym1 sym2)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-55__u7B26_u53F7_u7684_u7B26_u53F7"><a href="#ex2-55__u7B26_u53F7_u7684_u7B26_u53F7" class="headerlink" title="ex2.55 符号的符号"></a>ex2.55 符号的符号</h4><p>‘a 是 (quote a) 的缩写形式，’’a 即 ‘(quote a) </p>
<p>故而 (car ‘’a) 取得 quote</p>
<h4 id="ex2-56__u5E42_u6C42_u5BFC"><a href="#ex2-56__u5E42_u6C42_u5BFC" class="headerlink" title="ex2.56 幂求导"></a>ex2.56 幂求导</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">deriv</span> exp var)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">number</span>? exp)</span> <span class="number">0</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">variable</span>? exp)</span></span><br><span class="line">        <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">same-variable</span>? exp var)</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line">          <span class="number">0</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">sum</span>? exp)</span></span><br><span class="line">        <span class="list">(<span class="keyword">make-sum</span></span><br><span class="line">          <span class="list">(<span class="keyword">deriv</span> <span class="list">(<span class="keyword">addend</span> exp)</span> var)</span></span><br><span class="line">          <span class="list">(<span class="keyword">deriv</span> <span class="list">(<span class="keyword">augend</span> exp)</span> var)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">product</span>? exp)</span></span><br><span class="line">        <span class="list">(<span class="keyword">make-sum</span></span><br><span class="line">          <span class="list">(<span class="keyword">make-product</span> <span class="list">(<span class="keyword">multiplicand</span> exp)</span> <span class="list">(<span class="keyword">deriv</span> <span class="list">(<span class="keyword">multiplier</span> exp)</span> var)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">make-product</span> <span class="list">(<span class="keyword">multiplier</span> exp)</span> <span class="list">(<span class="keyword">deriv</span> <span class="list">(<span class="keyword">multiplicand</span> exp)</span> var)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">exponentiation</span>? exp)</span></span><br><span class="line">        <span class="list">(<span class="keyword">make-product</span> <span class="list">(<span class="keyword">exponent</span> exp)</span></span><br><span class="line">          <span class="list">(<span class="keyword">make-product</span></span><br><span class="line">            <span class="list">(<span class="keyword">make-exponentiation</span> <span class="list">(<span class="keyword">base</span> exp)</span> <span class="list">(<span class="keyword">make-subtract</span> <span class="list">(<span class="keyword">exponent</span> exp)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">deriv</span> <span class="list">(<span class="keyword">base</span> exp)</span> var)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">error</span> <span class="string">"unknown expression type -- DERIV"</span> exp)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">exponentiation</span>? e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">pair</span>? e)</span> <span class="list">(<span class="keyword">eq</span>? <span class="list">(<span class="keyword">car</span> e)</span> <span class="quoted">'**</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">base</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cadr</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">exponent</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">caddr</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-exponentiation</span> base exp)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=number</span>? exp <span class="number">0</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? exp <span class="number">1</span>)</span> base)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? base <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? base <span class="number">0</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">number</span>? base)</span> <span class="list">(<span class="keyword">number</span>? exp)</span>)</span> <span class="list">(<span class="keyword">expt</span> base exp)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">list</span> <span class="quoted">'**</span> base exp)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-subtract</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> b <span class="number">0</span>)</span> a)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">number</span>? a)</span> <span class="list">(<span class="keyword">number</span>? b)</span>)</span> <span class="list">(<span class="keyword">-</span> a b)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">list</span> <span class="quoted">'-</span> a b)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-57__u4EFB_u610F_u9879_u7684_u4E58_u6216_u52A0_u7684_u6C42_u5BFC"><a href="#ex2-57__u4EFB_u610F_u9879_u7684_u4E58_u6216_u52A0_u7684_u6C42_u5BFC" class="headerlink" title="ex2.57 任意项的乘或加的求导"></a>ex2.57 任意项的乘或加的求导</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">augend</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> <span class="list">(<span class="keyword">length</span> <span class="list">(<span class="keyword">cddr</span> e)</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">make-sum</span> <span class="list">(<span class="keyword">caddr</span> e)</span> <span class="list">(<span class="keyword">cadddr</span> e)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">caddr</span> e)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">multiplicand</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> <span class="list">(<span class="keyword">length</span> <span class="list">(<span class="keyword">cddr</span> e)</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">make-product</span> <span class="list">(<span class="keyword">caddr</span> e)</span> <span class="list">(<span class="keyword">cadddr</span> e)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">caddr</span> e)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-58__u4E2D_u7F00_u5F62_u5F0F_u6C42_u5BFC"><a href="#ex2-58__u4E2D_u7F00_u5F62_u5F0F_u6C42_u5BFC" class="headerlink" title="ex2.58 中缀形式求导"></a>ex2.58 中缀形式求导</h4><p>a) 这个问题很容易</p>
<p>b) 由于加法的优先级最低，所以先找+，然后处理*</p>
<p>注意这种选择函数，最后的变量会是 (x) 形式，需要把括号去掉</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">memq</span> item x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? x)</span> #f)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">eq</span>? item <span class="list">(<span class="keyword">car</span> x)</span>)</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">memq</span> item <span class="list">(<span class="keyword">cdr</span> x)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">before-i</span> item x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? x)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">eq</span>? item <span class="list">(<span class="keyword">car</span> x)</span>)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> x)</span> <span class="list">(<span class="keyword">before-i</span> item <span class="list">(<span class="keyword">cdr</span> x)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">before</span> item x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">tmp</span> <span class="list">(<span class="keyword">before-i</span> item x)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> <span class="list">(<span class="keyword">length</span> tmp)</span> <span class="number">1</span>)</span></span><br><span class="line">      tmp</span><br><span class="line">      <span class="list">(<span class="keyword">car</span> tmp)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">after-i</span> item x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cdr</span> <span class="list">(<span class="keyword">memq</span> item x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">after</span> item x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">tmp</span> <span class="list">(<span class="keyword">after-i</span> item x)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> <span class="list">(<span class="keyword">length</span> tmp)</span> <span class="number">1</span>)</span></span><br><span class="line">      tmp</span><br><span class="line">      <span class="list">(<span class="keyword">car</span> tmp)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">variable</span>? e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">symbol</span>? e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">same-variable</span>? v1 v2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">variable</span>? v1)</span> <span class="list">(<span class="keyword">variable</span>? v2)</span> <span class="list">(<span class="keyword">eq</span>? v1 v2)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum</span>? e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">pair</span>? e)</span> <span class="list">(<span class="keyword">memq</span> <span class="quoted">'+</span> e)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">addend</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">before</span> <span class="quoted">'+</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">augend</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">after</span> <span class="quoted">'+</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">=number</span>? exp val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">number</span>? exp)</span> <span class="list">(<span class="keyword">=</span> exp val)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-sum</span> a1 a2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=number</span>? a1 <span class="number">0</span>)</span> a2)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? a2 <span class="number">0</span>)</span> a1)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">number</span>? a1)</span> <span class="list">(<span class="keyword">number</span>? a2)</span>)</span> <span class="list">(<span class="keyword">+</span> a1 a2)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">list</span> a1 <span class="quoted">'+</span> a2)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">product</span>? e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">pair</span>? e)</span> <span class="list">(<span class="keyword">memq</span> <span class="quoted">'*</span> e)</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">memq</span> <span class="quoted">'+</span> e)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">multiplier</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">before</span> <span class="quoted">'*</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">multiplicand</span> e)</span></span><br><span class="line">  <span class="list">(<span class="keyword">after</span> <span class="quoted">'*</span> e)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">make-product</span> m1 m2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=number</span>? m1 <span class="number">0</span>)</span> <span class="list">(<span class="keyword">=number</span>? m2 <span class="number">0</span>)</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? m1 <span class="number">1</span>)</span> m2)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=number</span>? m2 <span class="number">1</span>)</span> m1)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">number</span>? m1)</span> <span class="list">(<span class="keyword">number</span>? m2)</span>)</span> <span class="list">(<span class="keyword">*</span> m1 m2)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">list</span> m1 <span class="quoted">'*</span> m2)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">deriv</span> <span class="quoted">'(x + <span class="number">3</span> <span class="variable">* ( x + y + 2)) 'x)</span></span></span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-59_union-set_u64CD_u4F5C"><a href="#ex2-59_union-set_u64CD_u4F5C" class="headerlink" title="ex2.59 union-set操作"></a>ex2.59 union-set操作</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">union-set</span> set1 set2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? set2)</span> set1)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">element-of-set</span>? <span class="list">(<span class="keyword">car</span> set2)</span> set1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">union-set</span> set1 <span class="list">(<span class="keyword">cdr</span> set2)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> set2)</span> <span class="list">(<span class="keyword">union-set</span> set1 <span class="list">(<span class="keyword">cdr</span> set2)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex2-60__u96C6_u5408_u7684_u91CD_u590D_u8868_u793A"><a href="#ex2-60__u96C6_u5408_u7684_u91CD_u590D_u8868_u793A" class="headerlink" title="ex2.60 集合的重复表示"></a>ex2.60 集合的重复表示</h4><p>intersection的去重可以在cons时候实现，而union需要把作为对比的集合去重</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">element-of-set</span>? x set)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">null</span>? set)</span> #f)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">equal</span>? x <span class="list">(<span class="keyword">car</span> set)</span>)</span> #t)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">element-of-set</span>? x <span class="list">(<span class="keyword">cdr</span> set)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">adjoin-set</span> x set)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">element-of-set</span>? x set)</span></span><br><span class="line">    set</span><br><span class="line">    <span class="list">(<span class="keyword">cons</span> x set)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">intersection-set</span> set1 set2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">null</span>? set1)</span> <span class="list">(<span class="keyword">null</span>? set2)</span>)</span> <span class="quoted">'()</span>)</span></span><br><span class="line">      <span class="list">(<span class="list">(<span class="keyword">element-of-set</span>? <span class="list">(<span class="keyword">car</span> set1)</span> set2)</span></span><br><span class="line">        <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">element-of-set</span>? <span class="list">(<span class="keyword">car</span> set1)</span> <span class="list">(<span class="keyword">intersection-set</span> <span class="list">(<span class="keyword">cdr</span> set1)</span> set2)</span>)</span></span><br><span class="line">            <span class="list">(<span class="keyword">intersection-set</span> <span class="list">(<span class="keyword">cdr</span> set1)</span> set2)</span></span><br><span class="line">            <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> set1)</span> <span class="list">(<span class="keyword">intersection-set</span> <span class="list">(<span class="keyword">cdr</span> set1)</span> set2)</span>)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">intersection-set</span> <span class="list">(<span class="keyword">cdr</span> set1)</span> set2)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 去重</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">undup</span> set)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? set)</span>  <span class="quoted">'()</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">element-of-set</span>? <span class="list">(<span class="keyword">car</span> set)</span> <span class="list">(<span class="keyword">cdr</span> set)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">undup</span> <span class="list">(<span class="keyword">cdr</span> set)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> set)</span> <span class="list">(<span class="keyword">undup</span> <span class="list">(<span class="keyword">cdr</span> set)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">union-set</span> set1 set2)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">null</span>? set2)</span> <span class="list">(<span class="keyword">undup</span> set1)</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">element-of-set</span>? <span class="list">(<span class="keyword">car</span> set2)</span> set1)</span></span><br><span class="line">      <span class="list">(<span class="keyword">union-set</span> set1 <span class="list">(<span class="keyword">cdr</span> set2)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">cons</span> <span class="list">(<span class="keyword">car</span> set2)</span> <span class="list">(<span class="keyword">union-set</span> set1 <span class="list">(<span class="keyword">cdr</span> set2)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<!-- TOC -->
<p>本人的SICP的习题解答，记录学习过程。简单的题目就忽略了。</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://blog.carpela.me/tags/SICP/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="函数式编程" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《自动机理论，语言和计算导论》笔记]]></title>
    <link href="http://blog.carpela.me/2016/03/04/note-to-iatlc/"/>
    <id>http://blog.carpela.me/2016/03/04/note-to-iatlc/</id>
    <published>2016-03-04T05:35:08.000Z</published>
    <updated>2016-03-11T07:59:29.000Z</updated>
    <content type="html"><![CDATA[<!-- TOC -->
<p><strong><em>Introduction to Automata Theory, Languages, and Computation</em></strong> 的笔记</p>
<a id="more"></a>
<h2 id="Chapter_1__u81EA_u52A8_u673A_uFF1A_u65B9_u6CD5_u4E0E_u4F53_u9A8C"><a href="#Chapter_1__u81EA_u52A8_u673A_uFF1A_u65B9_u6CD5_u4E0E_u4F53_u9A8C" class="headerlink" title="Chapter 1 自动机：方法与体验"></a>Chapter 1 自动机：方法与体验</h2><p>归纳法与演绎法证明：第一和第二数学归纳法</p>
<p>判定性问题：计算机能不能解决</p>
<p>难解性问题：计算机能不能有效解决</p>
<p>字母表 ∑ 非空有限集合，∑+ 与 ∑* 定义</p>
<p>串：w 空串 Ɛ</p>
<p>语言L：L是 ∑* 的子集</p>
<p>所有问题都能转化为：给定串w，判断是否属于语言L</p>
<h2 id="Chapter_2__u6709_u7A77_u81EA_u52A8_u673A"><a href="#Chapter_2__u6709_u7A77_u81EA_u52A8_u673A" class="headerlink" title="Chapter 2 有穷自动机"></a>Chapter 2 有穷自动机</h2><p>有穷自动机：有限个状态，五元组(Q,∑,ð,q0,F)</p>
<p>DFA, NFA, Ɛ-NFA 之间的区别是：</p>
<p>DFA同时只能处于一个状态，NFA可以处于多个状态，Ɛ-NFA可以自动转移到另一个状态(Ɛ-空转移)</p>
<h3 id="DFA"><a href="#DFA" class="headerlink" title="DFA"></a>DFA</h3><p>拓展的转移函数 ð’(q,w) = ð(ð’(q’,x),a) w=xa 由习题2.2.2知，a也可以是串</p>
<p>DFA A 接受的语言 L(A) = { w | ð’(q,w)属于F }</p>
<hr>
<h6 id="ex2-2-1"><a href="#ex2-2-1" class="headerlink" title="ex2.2.1"></a>ex2.2.1</h6><p>杠杆和出口共有16种状态，其中上一个球从哪里出去的不影响接下来球的去向，它只由杠杆状态确定。0表示杠杆向左，1表示向右，C/D表示出口，得出：</p>
<table>
<thead>
<tr>
<th></th>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;*000D</td>
<td>100C</td>
<td>011C</td>
</tr>
<tr>
<td>*001D</td>
<td>100C</td>
<td>000D</td>
</tr>
<tr>
<td>010C</td>
<td>110C</td>
<td>001D</td>
</tr>
<tr>
<td>*010D</td>
<td>110C</td>
<td>001D</td>
</tr>
<tr>
<td>011C</td>
<td>111C</td>
<td>010D</td>
</tr>
<tr>
<td>100C</td>
<td>010C</td>
<td>111C</td>
</tr>
<tr>
<td>*100D</td>
<td>010C</td>
<td>111C</td>
</tr>
<tr>
<td>101D</td>
<td>011C</td>
<td>100D</td>
</tr>
<tr>
<td>110C</td>
<td>011C</td>
<td>100D</td>
</tr>
<tr>
<td>*110D</td>
<td>011C</td>
<td>100D</td>
</tr>
<tr>
<td>111C</td>
<td>001D</td>
<td>110D</td>
</tr>
</tbody>
</table>
<h6 id="ex2-2-3"><a href="#ex2-2-3" class="headerlink" title="ex2.2.3"></a>ex2.2.3</h6><p>a. A以1结尾的串，B以10结尾的串，C以00结尾的串</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;A</td>
<td>B</td>
<td>A</td>
</tr>
<tr>
<td>B</td>
<td>C</td>
<td>A</td>
</tr>
<tr>
<td>*C</td>
<td>C</td>
<td>A</td>
</tr>
</tbody>
</table>
<p>b,c 与教材中例子类似</p>
<h6 id="ex2-2-5"><a href="#ex2-2-5" class="headerlink" title="ex2.2.5"></a>ex2.2.5</h6><p>a. 把所有串长度为0，1，2，3，4，5的各种可能表示为状态（63种）即可</p>
<p>c. </p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;a</td>
<td>b</td>
<td>d</td>
</tr>
<tr>
<td>b</td>
<td>e</td>
<td>c</td>
</tr>
<tr>
<td>*c</td>
<td>c</td>
<td>c</td>
</tr>
<tr>
<td>d</td>
<td>e</td>
<td>d</td>
</tr>
<tr>
<td>e</td>
<td>e</td>
<td>f</td>
</tr>
<tr>
<td>*f</td>
<td>e</td>
<td>d</td>
</tr>
</tbody>
</table>
<h6 id="ex2-2-6"><a href="#ex2-2-6" class="headerlink" title="ex2.2.6"></a>ex2.2.6</h6><p>a. 先判断以1开头，再根据余数确定状态 2<em>a[+1] mod 5 = ((a mod 5)</em>2 [+1]) mod 5 确定状态转移 共7种状态</p>
<p>b. 注意到输入0余数不变，输入1相当于加了 2^n 。由于 1 2 4 8 16 32 64 128 mod 5 余数是 1 2 4 3, 1 2 4 3… 容易得出：</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;a</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>*b</td>
<td>b</td>
<td>c</td>
</tr>
<tr>
<td>c</td>
<td>c</td>
<td>d</td>
</tr>
<tr>
<td>d</td>
<td>d</td>
<td>e</td>
</tr>
<tr>
<td>e</td>
<td>e</td>
<td>b</td>
</tr>
</tbody>
</table>
<h6 id="ex2-2-10"><a href="#ex2-2-10" class="headerlink" title="ex2.2.10"></a>ex2.2.10</h6><p>A：1的个数为偶数 B：1的个数为奇数</p>
<h6 id="ex2-2-11"><a href="#ex2-2-11" class="headerlink" title="ex2.2.11"></a>ex2.2.11</h6><p>所有不包含连续两个0的串</p>
<hr>
<p>常见DFA总结：</p>
<ul>
<li>以xxx开头/结尾：简单</li>
<li>包含xxx的子串：简单</li>
<li>倒数第n个是x：简单</li>
<li>连续n个符号包含m个x：2^(n+1)-1个状态</li>
<li>a的个数被m整除，b的个数被n整除：m*n个状态 整除都用余数表示状态</li>
<li>进制转换后整除：有特殊性，观察余数变化规律</li>
</ul>
<hr>
<h3 id="NFA"><a href="#NFA" class="headerlink" title="NFA"></a>NFA</h3><p>ð(q,a) = S 是Q的子集合</p>
<p>接受的语言： {w|ð(q0,w)与F的交集不为空}</p>
<p>NFA-&gt;DFA 子集构造法 以及惰性求值减少计算量</p>
<p>子集构造后的 L(D) = L(N) 的证明：对w进行归纳</p>
<p>一种n个状态转换成DFA至少2^n个状态的NFA的构造： 鸽巢原理</p>
<hr>
<h6 id="ex2-3-1"><a href="#ex2-3-1" class="headerlink" title="ex2.3.1"></a>ex2.3.1</h6><table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;{p}</td>
<td>{p,q}</td>
<td>{p}</td>
</tr>
<tr>
<td>{p,q}</td>
<td>{p,q,r}</td>
<td>{p,r}</td>
</tr>
<tr>
<td>{p,r}</td>
<td>{p,q,s}</td>
<td>{p}</td>
</tr>
<tr>
<td>{p,q,r}</td>
<td>{p,q,r,s}</td>
<td>{p,r}</td>
</tr>
<tr>
<td>*{p,q,r,s}</td>
<td>{p,q,r,s}</td>
<td>{p,r}</td>
</tr>
<tr>
<td>*{p,r,s}</td>
<td>{p,q,s}</td>
<td>{p,s}</td>
</tr>
<tr>
<td>*{p,q,s}</td>
<td>{p,q,r,s}</td>
<td>{p,r,s}</td>
</tr>
<tr>
<td>*{p,s}</td>
<td>{p,q,s}</td>
<td>{p,s}</td>
</tr>
</tbody>
</table>
<h6 id="ex2-3-3"><a href="#ex2-3-3" class="headerlink" title="ex2.3.3"></a>ex2.3.3</h6><table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;{p}</td>
<td>{p,q}</td>
<td>{p}</td>
</tr>
<tr>
<td>{p,q}</td>
<td>{p,q,r,s}</td>
<td>{p,t}</td>
</tr>
<tr>
<td>*{p,t}</td>
<td>{p,q}</td>
<td>{p}</td>
</tr>
<tr>
<td>*{p,q,r,s}</td>
<td>{p,q,r,s}</td>
<td>{p,t}</td>
</tr>
</tbody>
</table>
<p>所有以00或01结尾的0,1串</p>
<h6 id="ex2-3-4"><a href="#ex2-3-4" class="headerlink" title="ex2.3.4"></a>ex2.3.4</h6><p>a）初始未猜测状态，表示出现0-9状态，对应再出现0-9的接受状态</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>…</th>
<th>9</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;qs</td>
<td>{qs,q0}</td>
<td>…</td>
<td>{qs,q9}</td>
</tr>
<tr>
<td>q0</td>
<td>qf</td>
<td>…</td>
<td>q0</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>q9</td>
<td>q0</td>
<td>…</td>
<td>qf</td>
</tr>
<tr>
<td>*qf</td>
<td>ø</td>
<td>…</td>
<td>ø</td>
</tr>
</tbody>
</table>
<p>b）与a）情况相反，容易构造</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;q0</td>
<td>{q0,q1,q5}</td>
<td>{q0}</td>
</tr>
<tr>
<td>q1</td>
<td>ø</td>
<td>{q2}</td>
</tr>
<tr>
<td>q2</td>
<td>ø</td>
<td>{q3}</td>
</tr>
<tr>
<td>q3</td>
<td>ø</td>
<td>{q4}</td>
</tr>
<tr>
<td>q4</td>
<td>ø</td>
<td>{q5}</td>
</tr>
<tr>
<td>q5</td>
<td>{q6}</td>
<td>{q2}</td>
</tr>
<tr>
<td>*q6</td>
<td>{q6}</td>
<td>{q6}</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="u0190-NFA"><a href="#u0190-NFA" class="headerlink" title="Ɛ-NFA"></a>Ɛ-NFA</h3><p>与NFA相比，Ɛ闭包，允许空转移。</p>
<h6 id="ex2-5-2"><a href="#ex2-5-2" class="headerlink" title="ex2.5.2"></a>ex2.5.2</h6><p>ECLOSE(p) = {p,q,r}</p>
<p>ECLOSE(q) = {q}</p>
<p>ECLOSE(r) = {r}</p>
<p>转换成DFA：</p>
<table>
<thead>
<tr>
<th></th>
<th>a</th>
<th>b</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>-&gt;*s0</td>
<td>s0</td>
<td>s1</td>
<td>s2</td>
</tr>
<tr>
<td>s1</td>
<td>s0</td>
<td>s2</td>
<td>s0</td>
</tr>
<tr>
<td>*s2</td>
<td>#</td>
<td>#</td>
<td>#</td>
</tr>
</tbody>
</table>
<p>为了简单起见，#表示死状态，省略到死状态的转移</p>
<h2 id="Chapter_3_uFF1A_u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u6B63_u5219_u8BED_u8A00"><a href="#Chapter_3_uFF1A_u6B63_u5219_u8868_u8FBE_u5F0F_u4E0E_u6B63_u5219_u8BED_u8A00" class="headerlink" title="Chapter 3：正则表达式与正则语言"></a>Chapter 3：正则表达式与正则语言</h2><p>正则表达式提供了自动机所没有的东西：一种表达要接受的串的声明方式</p>
<h6 id="ex3-1-1"><a href="#ex3-1-1" class="headerlink" title="ex3.1.1"></a>ex3.1.1</h6><p>a) 第一个a在第一个b之前，以及相反情况：</p>
<pre><code>c*a(a+c)*b(a+b+c)* + c*b(b+c)*a(a+b+c)*
</code></pre><p>b) 倒数第十个是1，其它位置任意：</p>
<pre><code>(0+1)*1(0+1)9
</code></pre><p>c) 0<em>(10)</em>11(01)<em>0</em></p>
<h6 id="ex3-1-2"><a href="#ex3-1-2" class="headerlink" title="ex3.1.2"></a>ex3.1.2</h6><p>a) (1+Ɛ)(01)<em>(00)</em>(10)<em>(0+Ɛ)(11)</em>(01)*(0+Ɛ)</p>
]]></content>
    <summary type="html">
    <![CDATA[<!-- TOC -->
<p><strong><em>Introduction to Automata Theory, Languages, and Computation</em></strong> 的笔记</p>]]>
    
    </summary>
    
      <category term="形式语言" scheme="http://blog.carpela.me/tags/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="自动机理论" scheme="http://blog.carpela.me/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="计算理论" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[$\lambda$-Calculus]]></title>
    <link href="http://blog.carpela.me/2016/03/04/lambda-calculus/"/>
    <id>http://blog.carpela.me/2016/03/04/lambda-calculus/</id>
    <published>2016-03-04T05:35:08.000Z</published>
    <updated>2016-05-06T10:10:36.000Z</updated>
    <content type="html"><![CDATA[<!-- toc -->
<p><strong>$\lambda$ 演算($\lambda$-calculus)</strong> 是 Alonzo Church 于 1930s 提出的语法简单的通用计算模型，具有与图灵机相同的计算能力。它在计算机科学中扮演着重要角色，如LISP, ALGOL系列, 以及派生的FP语言等的语言模型都是基于它的。其次，它可以作为表述编程语言的指称语义(denotational semantics)的元语言。</p>
<a id="more"></a>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>$\lambda$ 演算的上下文无关文法定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;exp&#62;&#9;::=&#9;&#60;constant&#62;&#9;#&#24120;&#37327;&#10;&#9;::=&#9;&#60;variable&#62;&#9;#&#21464;&#37327;&#10;&#9;::=&#9;(&#60;exp&#62; &#60;exp&#62;)&#9;#&#20989;&#25968;&#24212;&#29992;&#10;&#9;::=&#9;$\lambda$&#60;variable&#62;.&#60;exp&#62;&#9;#Lambda&#25277;&#35937;</span><br></pre></td></tr></table></figure>
<p>所有的表达式使用前缀方式表示。比如 3 + 5 表示为 (+ 3 5)。</p>
<h3 id="u53D8_u91CF_u548C_u5E38_u91CF"><a href="#u53D8_u91CF_u548C_u5E38_u91CF" class="headerlink" title="变量和常量"></a>变量和常量</h3><p>常量是一个有限或者无限集合，它可以是：</p>
<ol>
<li>数字常量 1，2，3…’a’,’b’…</li>
<li>数学函数 +,-,*,/</li>
<li>逻辑常量 True, False</li>
<li>逻辑函数 AND, OR, NOT</li>
<li>条件函数 IF<br>…</li>
</ol>
<p>变量是一个无穷集合，常使用小写字母如 a,b,c…,x,y,z 表示。</p>
<h3 id="u51FD_u6570_u5E94_u7528_u4E0E_u591A_u4F59_u62EC_u53F7"><a href="#u51FD_u6570_u5E94_u7528_u4E0E_u591A_u4F59_u62EC_u53F7" class="headerlink" title="函数应用与多余括号"></a>函数应用与多余括号</h3><p>函数应用(function application)是使用一个参数调用某个函数。而 $\lambda$-calculus 里面的函数都是匿名函数(anonymous function)，并且只能有一个返回值。那么对于像 (+ 3 5) 这样的许多数学函数如何处理呢？</p>
<p>Currying </p>
]]></content>
    <summary type="html">
    <![CDATA[<!-- toc -->
<p><strong>$\lambda$ 演算($\lambda$-calculus)</strong> 是 Alonzo Church 于 1930s 提出的语法简单的通用计算模型，具有与图灵机相同的计算能力。它在计算机科学中扮演着重要角色，如LISP, ALGOL系列, 以及派生的FP语言等的语言模型都是基于它的。其次，它可以作为表述编程语言的指称语义(denotational semantics)的元语言。</p>]]>
    
    </summary>
    
      <category term="函数式编程" scheme="http://blog.carpela.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数理逻辑" scheme="http://blog.carpela.me/tags/%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="计算理论" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%A1%E7%AE%97%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《SICP》习题解答及笔记：第一章]]></title>
    <link href="http://blog.carpela.me/2016/03/02/solution-to-sicp-part-1/"/>
    <id>http://blog.carpela.me/2016/03/02/solution-to-sicp-part-1/</id>
    <published>2016-03-02T12:03:08.000Z</published>
    <updated>2016-03-10T05:38:40.000Z</updated>
    <content type="html"><![CDATA[<!-- TOC -->
<p>本人的SICP的习题解答，记录学习过程。简单的题目就忽略了。</p>
<a id="more"></a>
<h2 id="u7B2C_u4E00_u7AE0_uFF1A_u6784_u9020_u8FC7_u7A0B_u62BD_u8C61"><a href="#u7B2C_u4E00_u7AE0_uFF1A_u6784_u9020_u8FC7_u7A0B_u62BD_u8C61" class="headerlink" title="第一章：构造过程抽象"></a>第一章：构造过程抽象</h2><h3 id="1-1__u7A0B_u5E8F_u8BBE_u8BA1_u7684_u57FA_u672C_u5143_u7D20"><a href="#1-1__u7A0B_u5E8F_u8BBE_u8BA1_u7684_u57FA_u672C_u5143_u7D20" class="headerlink" title="1.1 程序设计的基本元素"></a>1.1 程序设计的基本元素</h3><p>基本的抽象：变量以及其环境。复合过程的代换模型以及求值模型：应用序和正则序。过程抽象。内部定义和块结构解决命名空间问题。静态作用域(词法作用域)。</p>
<h4 id="ex1-3__u6C42_u8F83_u5927_u4E24_u6570_u548C"><a href="#ex1-3__u6C42_u8F83_u5927_u4E24_u6570_u548C" class="headerlink" title="ex1.3 求较大两数和"></a>ex1.3 求较大两数和</h4><p>三个数的和减去最小的那个数即可</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">min</span> a b c)</span></span><br><span class="line">	<span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;</span> a b)</span> <span class="list">(<span class="keyword">&lt;</span> a c)</span>)</span> a)</span></span><br><span class="line">		<span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;</span> b a)</span> <span class="list">(<span class="keyword">&lt;</span> b c)</span>)</span> b)</span></span><br><span class="line">		<span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">&lt;</span> c a)</span> <span class="list">(<span class="keyword">&lt;</span> c b)</span>)</span> c)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum-of-max-two</span> a b c)</span></span><br><span class="line">	<span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">+</span> a b c)</span> <span class="list">(<span class="keyword">min</span> a b c)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-5__u5E94_u7528_u5E8F_or__u6B63_u5219_u5E8F"><a href="#ex1-5__u5E94_u7528_u5E8F_or__u6B63_u5219_u5E8F" class="headerlink" title="ex1.5 应用序 or 正则序"></a>ex1.5 应用序 or 正则序</h4><p>应用序：死循环，试图求值(p)，这是个无穷递归。</p>
<p>正则序：返回0，(p)不会被求值</p>
<h4 id="ex1-6_new-if"><a href="#ex1-6_new-if" class="headerlink" title="ex1.6 new-if"></a>ex1.6 new-if</h4><p>new-if 遵循的是普通过程的求值的函数，其所有参数都将被求值，即sqrt-iter过程在没执行cond判断时就会被调用，造成递归层数太大。</p>
<h4 id="ex1-7__u7CBE_u5EA6_u95EE_u9898"><a href="#ex1-7__u7CBE_u5EA6_u95EE_u9898" class="headerlink" title="ex1.7 精度问题"></a>ex1.7 精度问题</h4><p>很小的数，比如0.00000009，预期为0.0003，求值结果为0.062500478。因为0.01的误差很容易满足。</p>
<p>很大的数，比如90000000000000000，结果是死循环。</p>
<p>改进后可以适应：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">good-enough</span>? old new)</span></span><br><span class="line">  <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> old new)</span>)</span> old)</span> <span class="number">0.01</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sqrt-iter</span> guess x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">good-enough</span>? guess <span class="list">(<span class="keyword">improve</span> guess x)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">improve</span> guess x)</span></span><br><span class="line">    <span class="list">(<span class="keyword">sqrt-iter</span> <span class="list">(<span class="keyword">improve</span> guess x)</span> x)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>死循环参考别人解答说是精度无法表示较大的差值，不明白，留以后补充</strong></p>
<h4 id="ex1-8__u725B_u987F_u6CD5_u6C42_u7ACB_u65B9_u6839"><a href="#ex1-8__u725B_u987F_u6CD5_u6C42_u7ACB_u65B9_u6839" class="headerlink" title="ex1.8 牛顿法求立方根"></a>ex1.8 牛顿法求立方根</h4><p>给定的式子用来判断是否足够近似，测试前后预测值的变化率</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cbrt</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">good-enough</span>? old new)</span></span><br><span class="line">    <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> new old)</span>)</span> old)</span> <span class="number">0.01</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">/</span> n <span class="list">(<span class="keyword">*</span> guess guess)</span>)</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> guess)</span>)</span> <span class="number">3</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cbrt-iter</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">good-enough</span>? guess <span class="list">(<span class="keyword">improve</span> guess)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cbrt-iter</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cbrt-iter</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2__u8FC7_u7A0B_u4E0E_u5B83_u4EEC_u6240_u4EA7_u751F_u7684_u8FD0_u7B97"><a href="#1-2__u8FC7_u7A0B_u4E0E_u5B83_u4EEC_u6240_u4EA7_u751F_u7684_u8FD0_u7B97" class="headerlink" title="1.2 过程与它们所产生的运算"></a>1.2 过程与它们所产生的运算</h3><p>递归计算过程与迭代计算过程。scheme解释器尾递归，用其表示迭代。一般来说，树形递归步骤数增长阶正比于树中节点数，空间增长阶正比于树的深度。快速求幂log(n)的算法。迭代算法设计要点：不变量。fibonacci数列的对数步算法。</p>
<p>lame定理：如果欧几里得算法需要用k步计算出一对整数的GCD，那么这对数中较小的那个数必定小于或等于第k个fibonacci数 -&gt; GCD的计算增长阶是 theta(log n)</p>
<p>费马小定理：如果n是一个素数，a是小于n的任意正整数，那么a的n次方与a模n同余</p>
<p>费马检查确定素数</p>
<p>scheme bool true/false #t/#f</p>
<h4 id="ex1-9__u52A0_u6CD5_u7684_u8FED_u4EE3_u548C_u9012_u5F52"><a href="#ex1-9__u52A0_u6CD5_u7684_u8FED_u4EE3_u548C_u9012_u5F52" class="headerlink" title="ex1.9 加法的迭代和递归"></a>ex1.9 加法的迭代和递归</h4><p>第一个是递归，第二个是迭代</p>
<h4 id="ex1-10_Ackermann_u51FD_u6570"><a href="#ex1-10_Ackermann_u51FD_u6570" class="headerlink" title="ex1.10 Ackermann函数"></a>ex1.10 <a href="https://en.wikipedia.org/wiki/Ackermann_function" target="_blank" rel="external">Ackermann函数</a></h4><p>f(n) = 2n</p>
<p>g(n) = 2^n</p>
<p>h(n) = 2^2^2…^2 (共n个2)</p>
<h4 id="ex1-11_f_28n_29_3Df_28n-1_29+2f_28n-2_29+3f_28n-3_29_u7684_u9012_u5F52_u548C_u8FED_u4EE3"><a href="#ex1-11_f_28n_29_3Df_28n-1_29+2f_28n-2_29+3f_28n-3_29_u7684_u9012_u5F52_u548C_u8FED_u4EE3" class="headerlink" title="ex1.11 f(n)=f(n-1)+2f(n-2)+3f(n-3)的递归和迭代"></a>ex1.11 f(n)=f(n-1)+2f(n-2)+3f(n-3)的递归和迭代</h4><p>递归版本：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&lt;</span> n <span class="number">3</span>)</span></span><br><span class="line">    n</span><br><span class="line">    <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">-</span> n <span class="number">2</span>)</span>)</span>)</span> <span class="list">(<span class="keyword">*</span> <span class="number">3</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">-</span> n <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>转化成非递归的方式类似Fibonacci数列：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">f-iter</span> a b c count)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">&lt;=</span> count <span class="number">3</span>)</span> <span class="list">(<span class="keyword">+</span> a <span class="list">(<span class="keyword">*</span> b <span class="number">2</span>)</span> <span class="list">(<span class="keyword">*</span> c <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">f-iter</span> <span class="list">(<span class="keyword">+</span> a <span class="list">(<span class="keyword">*</span> b <span class="number">2</span>)</span> <span class="list">(<span class="keyword">*</span> c <span class="number">3</span>)</span>)</span> a b <span class="list">(<span class="keyword">-</span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">f</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">f-iter</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-12__u5E15_u65AF_u5361_u4E09_u89D2_u5F62"><a href="#ex1-12__u5E15_u65AF_u5361_u4E09_u89D2_u5F62" class="headerlink" title="ex1.12 帕斯卡三角形"></a>ex1.12 帕斯卡三角形</h4><p>组合数计算公式</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">psc</span> n r)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=</span> r <span class="number">1</span>)</span> <span class="list">(<span class="keyword">=</span> r n)</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">psc</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword">-</span> r <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">psc</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> r)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>改用迭代：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fact-iter</span> count val)</span></span><br><span class="line">	<span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> count <span class="number">0</span>)</span> val)</span></span><br><span class="line">		<span class="list">(<span class="keyword">fact-iter</span> <span class="list">(<span class="keyword">-</span> count <span class="number">1</span>)</span> <span class="list">(<span class="keyword">*</span> count val)</span>)</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fact</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">fact-iter</span> n <span class="number">1</span>)</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">psc-iter</span> n r)</span></span><br><span class="line">	<span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">fact</span> n)</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">fact</span> r)</span> <span class="list">(<span class="keyword">fact</span> <span class="list">(<span class="keyword">-</span> n r)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：这种方法不是psc过程严格对应的迭代形式，更优的解法有待进一步发掘</strong></p>
<h4 id="ex1-14__u6362_u96F6_u94B1_u590D_u6742_u5EA6_u5206_u6790"><a href="#ex1-14__u6362_u96F6_u94B1_u590D_u6742_u5EA6_u5206_u6790" class="headerlink" title="ex1.14 换零钱复杂度分析"></a>ex1.14 换零钱复杂度分析</h4><p>树的最大深度是 (n,m) -&gt; (n,1) -&gt; (0,1) 即 空间增长阶 theta(n+m)</p>
<p><strong>步数增长阶待求</strong></p>
<h4 id="ex1-15__u725B_u987F_u8FED_u4EE3_u590D_u6742_u5EA6"><a href="#ex1-15__u725B_u987F_u8FED_u4EE3_u590D_u6742_u5EA6" class="headerlink" title="ex1.15 牛顿迭代复杂度"></a>ex1.15 牛顿迭代复杂度</h4><p>p调用了5次， a/3^n &lt; 0.1 得到 n &gt; log3(10*a)，即增长的阶是 log(a)</p>
<h4 id="ex1-16__u5E42_u8FED_u4EE3"><a href="#ex1-16__u5E42_u8FED_u4EE3" class="headerlink" title="ex1.16 幂迭代"></a>ex1.16 幂迭代</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt-iter</span> b n val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> val)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? n)</span> <span class="list">(<span class="keyword">expt-iter</span> <span class="list">(<span class="keyword">*</span> b b)</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span> val)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">expt-iter</span> b <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword">*</span> val b)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt</span> b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">expt-iter</span> b n <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-17__u5FEB_u901F_u4E58_u6CD5"><a href="#ex1-17__u5FEB_u901F_u4E58_u6CD5" class="headerlink" title="ex1.17 快速乘法"></a>ex1.17 快速乘法</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fast-multi</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> b <span class="number">1</span>)</span> a)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? b)</span> <span class="list">(<span class="keyword">fast-multi</span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">+</span> a <span class="list">(<span class="keyword">fast-multi</span> a <span class="list">(<span class="keyword">-</span> b <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-18__u5FEB_u901F_u4E58_u6CD5_u8FED_u4EE3"><a href="#ex1-18__u5FEB_u901F_u4E58_u6CD5_u8FED_u4EE3" class="headerlink" title="ex1.18 快速乘法迭代"></a>ex1.18 快速乘法迭代</h4><p>不变式是 a*b+val，两种状态转换： </p>
<ul>
<li>(a*2) * (b/2) + val</li>
<li>a * (b-1) + (val+a)</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">multi-iter</span> a b val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> b <span class="number">0</span>)</span> val)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? b)</span> <span class="list">(<span class="keyword">multi-iter</span> <span class="list">(<span class="keyword">double</span> a)</span> <span class="list">(<span class="keyword">halve</span> b)</span> val)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">multi-iter</span> a <span class="list">(<span class="keyword">-</span> b <span class="number">1</span>)</span> <span class="list">(<span class="keyword">+</span> val a)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">multi</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">multi-iter</span> a b <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-19__u5BF9_u6570_u7684Fibonacci_u8BA1_u7B97"><a href="#ex1-19__u5BF9_u6570_u7684Fibonacci_u8BA1_u7B97" class="headerlink" title="ex1.19 对数的Fibonacci计算"></a>ex1.19 对数的Fibonacci计算</h4><p>p &lt;- p^2 + q^2</p>
<p>q &lt;- q^2 + 2pq</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fib-iter</span> a b p q n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> b)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? n)</span> <span class="list">(<span class="keyword">fib-iter</span> a b <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> p p)</span> <span class="list">(<span class="keyword">*</span> q q)</span>)</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> q q)</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> p q)</span>)</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> a p)</span> <span class="list">(<span class="keyword">*</span> q <span class="list">(<span class="keyword">+</span> a b)</span>)</span>)</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> b p)</span> <span class="list">(<span class="keyword">*</span> a q)</span>)</span> p q <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fib</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fib-iter</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-20__u6C42_u503C_u6A21_u578B_u4E0E_u8BA1_u7B97_u8FC7_u7A0B"><a href="#ex1-20__u6C42_u503C_u6A21_u578B_u4E0E_u8BA1_u7B97_u8FC7_u7A0B" class="headerlink" title="ex1.20 求值模型与计算过程"></a>ex1.20 求值模型与计算过程</h4><table>
<thead>
<tr>
<th>if-cond</th>
<th style="text-align:center">procedure</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td style="text-align:center">(gcd 206 40)</td>
</tr>
<tr>
<td>40!=0</td>
<td style="text-align:center">(gcd 40 (r 206 40))</td>
</tr>
<tr>
<td>(r 206 40)=6</td>
<td style="text-align:center">(gcd (r 206 40) (r 40 (r 206 40)))</td>
</tr>
<tr>
<td>(r 40 (r 206 40))=4</td>
<td style="text-align:center">(gcd (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))</td>
</tr>
<tr>
<td>(r (r 206 40) (r 40 (r 206 40)))=2</td>
<td style="text-align:center">(gcd (r (r 206 40) (r 40 (r 206 40))) (r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40)))))</td>
</tr>
<tr>
<td>(r (r 40 (r 206 40)) (r (r 206 40) (r 40 (r 206 40))))=0</td>
<td style="text-align:center">(r (r 206 40) (r 40 (r 206 40)))</td>
</tr>
</tbody>
</table>
<p>所以remainder调用次数是18次，应用序是4次</p>
<h4 id="ex1-23__u53BB_u9664_u65E0_u7528_u68C0_u67E5"><a href="#ex1-23__u53BB_u9664_u65E0_u7528_u68C0_u67E5" class="headerlink" title="ex1.23 去除无用检查"></a>ex1.23 去除无用检查</h4><p>约为1.5倍，next的过程调用需要一定时间</p>
<h4 id="ex1-25__u53E6_u4E00_u79CDexpmod"><a href="#ex1-25__u53E6_u4E00_u79CDexpmod" class="headerlink" title="ex1.25 另一种expmod"></a>ex1.25 另一种expmod</h4><p>原则上可行，但是当遇到 base^exp 非常大时，scheme无法表示，就会出现问题。而正文部分的expmod中间结果始终小于 m*m</p>
<h4 id="ex1-26__u7CDF_u7CD5_u5199_u6CD5_u7684expmod"><a href="#ex1-26__u7CDF_u7CD5_u5199_u6CD5_u7684expmod" class="headerlink" title="ex1.26 糟糕写法的expmod"></a>ex1.26 糟糕写法的expmod</h4><p>(expmod base (/ exp 2) m) 被计算两次，形成树形递归，时间复杂度变成 theta(n)</p>
<h4 id="ex1-28_Miller-Rabin_u68C0_u67E5"><a href="#ex1-28_Miller-Rabin_u68C0_u67E5" class="headerlink" title="ex1.28 Miller-Rabin检查"></a>ex1.28 Miller-Rabin检查</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">*</span> n n)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expmod</span> b e m)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">square-mod-check</span> x)</span></span><br><span class="line">    <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">and</span> <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">remainder</span> <span class="list">(<span class="keyword">*</span> x x)</span> m)</span> <span class="number">1</span>)</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">=</span> x <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">not</span> <span class="list">(<span class="keyword">=</span> x <span class="list">(<span class="keyword">-</span> m <span class="number">1</span>)</span>)</span>)</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">remainder</span> <span class="list">(<span class="keyword">*</span> x x)</span> m)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> e <span class="number">0</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? e)</span> <span class="list">(<span class="keyword">square-mod-check</span> <span class="list">(<span class="keyword">expmod</span> b <span class="list">(<span class="keyword">/</span> e <span class="number">2</span>)</span> m)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">remainder</span> <span class="list">(<span class="keyword">*</span> b <span class="list">(<span class="keyword">expmod</span> b <span class="list">(<span class="keyword">-</span> e <span class="number">1</span>)</span> m)</span>)</span> m)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">miller-rabin-test</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">try-it</span> a)</span></span><br><span class="line">    <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">expmod</span> a <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> n)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try-it</span> <span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="list">(<span class="keyword">random</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fast-prime</span>? n times)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> times <span class="number">0</span>)</span> true)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">miller-rabin-test</span> n)</span> <span class="list">(<span class="keyword">fast-prime</span>? n <span class="list">(<span class="keyword">-</span> times <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> false)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3__u7528_u9AD8_u9636_u8FC7_u7A0B_u505A_u62BD_u8C61"><a href="#1-3__u7528_u9AD8_u9636_u8FC7_u7A0B_u505A_u62BD_u8C61" class="headerlink" title="1.3 用高阶过程做抽象"></a>1.3 用高阶过程做抽象</h3><p>过程，抽象，高阶过程。累积和过滤器。lambda。let，注意其参数值是在let之外计算的，局部变量设置值的表达式中变量值为外部的。平均阻尼技术阻止不动点计算的振荡。truncate 用于取整。</p>
<h4 id="ex1-29__u8F9B_u666E_u68EE_u89C4_u5219"><a href="#ex1-29__u8F9B_u666E_u68EE_u89C4_u5219" class="headerlink" title="ex1.29 辛普森规则"></a>ex1.29 辛普森规则</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">integral</span> f a b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> h <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">*</span> <span class="number">1.0</span> <span class="list">(<span class="keyword">-</span> b a)</span>)</span> n)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword">+</span> a h)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum</span> a next b count)</span></span><br><span class="line">    <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fact</span> count)</span></span><br><span class="line">      <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=</span> count <span class="number">0</span>)</span> <span class="list">(<span class="keyword">=</span> count n)</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">        <span class="list">(<span class="list">(<span class="keyword">even</span>? count)</span> <span class="number">2</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">else</span> <span class="number">4</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">fact</span> count)</span> <span class="list">(<span class="keyword">f</span> a)</span>)</span> <span class="list">(<span class="keyword">sum</span> <span class="list">(<span class="keyword">next</span> a)</span> next b <span class="list">(<span class="keyword">+</span> count <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">*</span> h <span class="list">(<span class="keyword">sum</span> a next b <span class="number">0</span>)</span>)</span> <span class="number">3</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-30__u8FED_u4EE3_u7684sum"><a href="#ex1-30__u8FED_u4EE3_u7684sum" class="headerlink" title="ex1.30 迭代的sum"></a>ex1.30 迭代的sum</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">      result</span><br><span class="line">      <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword">+</span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> a <span class="number">0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-31_product_u62BD_u8C61"><a href="#ex1-31_product_u62BD_u8C61" class="headerlink" title="ex1.31 product抽象"></a>ex1.31 product抽象</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">term</span> a)</span> <span class="list">(<span class="keyword">product</span> term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">factorial</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">identify</span> x)</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">next</span> x)</span> <span class="list">(<span class="keyword">+</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">product</span> identify <span class="number">1</span> next n)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">pi-sim</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">next</span> x)</span> <span class="list">(<span class="keyword">+</span> x <span class="number">2.0</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">f</span> x)</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">*</span> <span class="list">(<span class="keyword">-</span> x <span class="number">1</span>)</span> <span class="list">(<span class="keyword">+</span> x <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">*</span> x x)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">*</span> <span class="number">4</span> <span class="list">(<span class="keyword">product</span> f <span class="number">3</span> next n)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">prodct-iter</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span> <span class="number">1</span></span><br><span class="line">      <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword">*</span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> a <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-32__u901A_u7528_u7684_u7D2F_u79EF_u8FC7_u7A0B"><a href="#ex1-32__u901A_u7528_u7684_u7D2F_u79EF_u8FC7_u7A0B" class="headerlink" title="ex1.32 通用的累积过程"></a>ex1.32 通用的累积过程</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">accumulate</span> combiner null-value term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">    null-value</span><br><span class="line">    <span class="list">(<span class="keyword">combiner</span> <span class="list">(<span class="keyword">term</span> a)</span> <span class="list">(<span class="keyword">accumulate</span> combiner null-value term <span class="list">(<span class="keyword">next</span> a)</span> next b)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">accumulate-iter</span> combiner null-value term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iter</span> a result)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">      null-value</span><br><span class="line">      <span class="list">(<span class="keyword">iter</span> <span class="list">(<span class="keyword">next</span> a)</span> <span class="list">(<span class="keyword">combiner</span> result <span class="list">(<span class="keyword">term</span> a)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">iter</span> a null-value)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> + <span class="number">0</span> term a next b)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">product</span> term a next b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">accumulate</span> <span class="variable">* 1 term a next b))</span></span></span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-33__u5E26_u8FC7_u6EE4_u5668_u7684_u7D2F_u79EF_u8FC7_u7A0B"><a href="#ex1-33__u5E26_u8FC7_u6EE4_u5668_u7684_u7D2F_u79EF_u8FC7_u7A0B" class="headerlink" title="ex1.33 带过滤器的累积过程"></a>ex1.33 带过滤器的累积过程</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">filtered-accumulate</span> combiner null-value term a next b p?)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">filter</span> n)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">p</span>? n)</span> n null-value)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">&gt;</span> a b)</span></span><br><span class="line">    null-value</span><br><span class="line">    <span class="list">(<span class="keyword">combiner</span> <span class="list">(<span class="keyword">filter</span> <span class="list">(<span class="keyword">term</span> a)</span>)</span> <span class="list">(<span class="keyword">filtered-accumulate</span> combiner null-value term <span class="list">(<span class="keyword">next</span> a)</span> next b p?)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;a </span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum-of-prime</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">identify</span> x)</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">next</span> x)</span> <span class="list">(<span class="keyword">+</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">filtered-accumulate</span> + <span class="number">0</span> identify a next b prime?)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;b</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sum-of-n-prime</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">identify</span> x)</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">next</span> x)</span> <span class="list">(<span class="keyword">+</span> x <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">n-prime</span>? a)</span> <span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">gcd</span> a n)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">filtered-accumulate</span> + <span class="number">0</span> idenfity <span class="number">1</span> next n n-prime?)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-34__28f_f_29_u8C03_u7528"><a href="#ex1-34__28f_f_29_u8C03_u7528" class="headerlink" title="ex1.34 (f f)调用"></a>ex1.34 (f f)调用</h4><p>提示： The object 2 is not applicable</p>
<p>(f f) -&gt; (f 2) -&gt; (2 2)</p>
<h4 id="ex1-35__u9EC4_u91D1_u5206_u5272_u7387"><a href="#ex1-35__u9EC4_u91D1_u5206_u5272_u7387" class="headerlink" title="ex1.35 黄金分割率"></a>ex1.35 黄金分割率</h4><p>x = 1 + 1/x 即可得出</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">gold-split</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">+</span> <span class="number">1</span> <span class="list">(<span class="keyword">/</span> <span class="number">1</span> x)</span>)</span>)</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-36__u6253_u5370_u5E8F_u5217_u7684fixed-point"><a href="#ex1-36__u6253_u5370_u5E8F_u5217_u7684fixed-point" class="headerlink" title="ex1.36 打印序列的fixed-point"></a>ex1.36 打印序列的fixed-point</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">good-enough</span>? guess next)</span></span><br><span class="line">    <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> guess next)</span>)</span> <span class="number">0.00001</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">try-it</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">f</span> guess)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">display</span> guess)</span></span><br><span class="line">      <span class="list">(<span class="keyword">newline</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">good-enough</span>? guess next)</span></span><br><span class="line">        next</span><br><span class="line">        <span class="list">(<span class="keyword">try-it</span> next)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try-it</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">x-pow-x-root</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">log</span> n)</span> <span class="list">(<span class="keyword">log</span> x)</span>)</span>)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">x-pow-x-root-n</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">average</span> x y)</span></span><br><span class="line">    <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> x y)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">average</span> x <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">log</span> n)</span> <span class="list">(<span class="keyword">log</span> x)</span> <span class="number">2</span>)</span>)</span>)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 33 steps</span></span><br><span class="line"><span class="list">(<span class="keyword">x-pow-x-root</span> <span class="number">1000</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 6 steps</span></span><br><span class="line"><span class="list">(<span class="keyword">x-pow-x-root-n</span> <span class="number">1000</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-37__u65E0_u7A77_u8FDE_u5206_u5F0F"><a href="#ex1-37__u65E0_u7A77_u8FDE_u5206_u5F0F" class="headerlink" title="ex1.37 无穷连分式"></a>ex1.37 无穷连分式</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; recursion</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">  <span class="comment">; 下标cur开始的连分式结果</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont</span> cur)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">=</span> cur k)</span></span><br><span class="line">      <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> cur)</span> <span class="list">(<span class="keyword">d</span> cur)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> cur)</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">d</span> cur)</span> <span class="list">(<span class="keyword">cont</span> <span class="list">(<span class="keyword">+</span> cur <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cont</span> <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">cont-frac</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span> <span class="number">100</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; iteration</span></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont-iter</span> cur val)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">=</span> cur <span class="number">0</span>)</span> val</span><br><span class="line">      <span class="list">(<span class="keyword">cont-iter</span> <span class="list">(<span class="keyword">-</span> cur <span class="number">1</span>)</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> <span class="list">(<span class="keyword">-</span> cur <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">+</span> val <span class="list">(<span class="keyword">d</span> <span class="list">(<span class="keyword">-</span> cur <span class="number">1</span>)</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cont-iter</span> k <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> k)</span> <span class="list">(<span class="keyword">d</span> k)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>多试验几次，发现k大于11即可</p>
<h4 id="ex1-38_e-2_u7684_u8FDE_u5206_u5F0F_u5C55_u5F00"><a href="#ex1-38_e-2_u7684_u8FDE_u5206_u5F0F_u5C55_u5F00" class="headerlink" title="ex1.38 e-2的连分式展开"></a>ex1.38 e-2的连分式展开</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">e</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">cont-frac</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span> <span class="number">1.0</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">r</span> <span class="list">(<span class="keyword">remainder</span> i <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line">          <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">or</span> <span class="list">(<span class="keyword">=</span> r <span class="number">0</span>)</span> <span class="list">(<span class="keyword">=</span> r <span class="number">1</span>)</span>)</span> <span class="number">1</span></span><br><span class="line">          <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">truncate</span> <span class="list">(<span class="keyword">/</span> i <span class="number">3</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">      n)</span> <span class="number">2</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-39__u6B63_u5207_u51FD_u6570_u7684_u8FDE_u5206_u5F0F_u5C55_u5F00"><a href="#ex1-39__u6B63_u5207_u51FD_u6570_u7684_u8FDE_u5206_u5F0F_u5C55_u5F00" class="headerlink" title="ex1.39 正切函数的连分式展开"></a>ex1.39 正切函数的连分式展开</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont-frac</span> n d k)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cont</span> cur)</span></span><br><span class="line">    <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">=</span> cur k)</span></span><br><span class="line">      <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> cur)</span> <span class="list">(<span class="keyword">d</span> cur)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">n</span> cur)</span> <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">d</span> cur)</span> <span class="list">(<span class="keyword">cont</span> <span class="list">(<span class="keyword">+</span> cur <span class="number">1.0</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cont</span> <span class="number">1.0</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">tan-cf</span> x k)</span></span><br><span class="line">  <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">cont-frac</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span> <span class="list">(<span class="keyword">*</span> x x)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">i</span>)</span> <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> i)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">      k)</span></span><br><span class="line">    x)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-40__u4E09_u6B21_u65B9_u7A0B_u96F6_u70B9"><a href="#ex1-40__u4E09_u6B21_u65B9_u7A0B_u96F6_u70B9" class="headerlink" title="ex1.40 三次方程零点"></a>ex1.40 三次方程零点</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">cubic</span> a b c)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> x x x)</span> <span class="list">(<span class="keyword">*</span> a x x)</span> <span class="list">(<span class="keyword">*</span> b x)</span> c)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-41_double_u8FC7_u7A0B"><a href="#ex1-41_double_u8FC7_u7A0B" class="headerlink" title="ex1.41 double过程"></a>ex1.41 double过程</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">double</span> f)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>结果为21</p>
<h4 id="ex1-42__u590D_u5408_u51FD_u6570"><a href="#ex1-42__u590D_u5408_u51FD_u6570" class="headerlink" title="ex1.42 复合函数"></a>ex1.42 复合函数</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">compose</span> f g)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">g</span> x)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-43_n_u6B21_u590D_u5408"><a href="#ex1-43_n_u6B21_u590D_u5408" class="headerlink" title="ex1.43 n次复合"></a>ex1.43 n次复合</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">repeated</span> f n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> f)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? n)</span>  <span class="list">(<span class="keyword">double</span> <span class="list">(<span class="keyword">repeated</span> f <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">compose</span> <span class="list">(<span class="keyword">repeated</span> f <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span> f)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-44__u5E73_u6ED1_u51FD_u6570"><a href="#ex1-44__u5E73_u6ED1_u51FD_u6570" class="headerlink" title="ex1.44 平滑函数"></a>ex1.44 平滑函数</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">smooth</span> f)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">-</span> x dx)</span>)</span> <span class="list">(<span class="keyword">f</span> x)</span> <span class="list">(<span class="keyword">f</span> <span class="list">(<span class="keyword">+</span> x dx)</span>)</span>)</span> <span class="number">3</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">smooth-n</span> f n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="list">(<span class="list">(<span class="keyword">repeated</span> smooth n)</span> f)</span> x)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="list">(<span class="keyword">smooth-n</span> square <span class="number">5</span>)</span> <span class="number">4</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-45_n_u6B21_u65B9_u6839"><a href="#ex1-45_n_u6B21_u65B9_u6839" class="headerlink" title="ex1.45 n次方根"></a>ex1.45 n次方根</h4><p>n次方根需要n-1次平均阻尼</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt-iter</span> b n val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">0</span>)</span> val)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">even</span>? n)</span> <span class="list">(<span class="keyword">expt-iter</span> <span class="list">(<span class="keyword">*</span> b b)</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span> val)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">expt-iter</span> b <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="list">(<span class="keyword">*</span> val b)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">expt</span> b n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">expt-iter</span> b n <span class="number">1</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">good-enough</span>? guess next)</span></span><br><span class="line">    <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> guess next)</span>)</span> <span class="number">0.00001</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">try-it</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">f</span> guess)</span>)</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">display</span> guess)</span></span><br><span class="line">      <span class="list">(<span class="keyword">newline</span>)</span></span><br><span class="line">      <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">good-enough</span>? guess next)</span></span><br><span class="line">        next</span><br><span class="line">        <span class="list">(<span class="keyword">try-it</span> next)</span>)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">try-it</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">average</span> a b)</span></span><br><span class="line">  <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> a b)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">average-damp</span> f)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">x</span>)</span> <span class="list">(<span class="keyword">average</span> x <span class="list">(<span class="keyword">f</span> x)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">n-root</span> n x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">fixed-point</span> <span class="list">(<span class="keyword">repeated</span> <span class="list">(<span class="keyword">average-damp</span> <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">y</span>)</span> <span class="list">(<span class="keyword">/</span> x <span class="list">(<span class="keyword">expt</span> y <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span>)</span>)</span>)</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<h4 id="ex1-46__u8FED_u4EE3_u5F0F_u6539_u8FDB"><a href="#ex1-46__u8FED_u4EE3_u5F0F_u6539_u8FDB" class="headerlink" title="ex1.46 迭代式改进"></a>ex1.46 迭代式改进</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">iterative-improve</span> close-enough? improve)</span></span><br><span class="line">  <span class="list">(<span class="keyword">lambda</span> <span class="list">(<span class="keyword">first-guess</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">try</span> guess)</span></span><br><span class="line">      <span class="list">(<span class="keyword">let</span> <span class="list">(<span class="list">(<span class="keyword">next</span> <span class="list">(<span class="keyword">improve</span> guess)</span>)</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">close-enough</span>? guess next)</span></span><br><span class="line">          next</span><br><span class="line">          <span class="list">(<span class="keyword">try</span> next)</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">try</span> first-guess)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fixed-point</span> f first-guess)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> tolerance <span class="number">0.00001</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">close-enough</span>? v1 v2)</span></span><br><span class="line">    <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> v1 v2)</span>)</span> tolerance)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">f</span> guess)</span>)</span></span><br><span class="line">  <span class="list">(<span class="list">(<span class="keyword">iterative-improve</span> close-enough? improve)</span> first-guess)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">sqrt</span> x)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> dx <span class="number">0.00001</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">close-enough</span>? v1 v2)</span></span><br><span class="line">    <span class="list">(<span class="keyword">&lt;</span> <span class="list">(<span class="keyword">abs</span> <span class="list">(<span class="keyword">-</span> v1 v2)</span>)</span> dx)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">improve</span> guess)</span></span><br><span class="line">    <span class="list">(<span class="keyword">average</span> guess <span class="list">(<span class="keyword">/</span> x guess)</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">average</span> x y)</span></span><br><span class="line">    <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">+</span> x y)</span> <span class="number">2</span>)</span>)</span></span><br><span class="line">  <span class="list">(<span class="list">(<span class="keyword">iterative-improve</span> close-enough? improve)</span> <span class="number">1.0</span>)</span>)</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<!-- TOC -->
<p>本人的SICP的习题解答，记录学习过程。简单的题目就忽略了。</p>]]>
    
    </summary>
    
      <category term="SICP" scheme="http://blog.carpela.me/tags/SICP/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="函数式编程" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[递归与迭代]]></title>
    <link href="http://blog.carpela.me/2016/02/29/recursion-and-iteration/"/>
    <id>http://blog.carpela.me/2016/02/29/recursion-and-iteration/</id>
    <published>2016-02-29T15:44:26.000Z</published>
    <updated>2016-03-05T04:58:08.000Z</updated>
    <content type="html"><![CDATA[<!-- TOC -->
<p>递归到迭代的转化是计算机科学中的一个经典问题，本篇文章简单讨论了是否所有递归都可以转化成迭代，给出了递归向迭代转化的基本方法。并介绍了尾递归，它作为一种特殊形式的递归，许多编译器将其优化为迭代。</p>
<a id="more"></a>
<h2 id="u9012_u5F52_u4E0E_u8FED_u4EE3"><a href="#u9012_u5F52_u4E0E_u8FED_u4EE3" class="headerlink" title="递归与迭代"></a>递归与迭代</h2><p>这个词汇大家都不会陌生，简单来说，递归就是函数自己调用自己，同时需要一个结束条件。上一篇关于约瑟夫问题的博客中就用到了(scheme)：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">josephus</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    	<span class="list">(<span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">remainder</span> n <span class="number">2</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">        	<span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">josephus</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span>)</span>)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    	<span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">josephus</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="number">2</span>)</span>)</span>)</span> <span class="number">1</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>再比如经典的Fibonacci数列：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fib</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">		<span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">2</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">		<span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">fib</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span>)</span> <span class="list">(<span class="keyword">fib</span> <span class="list">(<span class="keyword">-</span> n <span class="number">2</span>)</span>)</span>)</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>还有大家所熟知的二叉树遍历。</p>
<p>而迭代通常是大家所熟知的循环结构，它的内存消耗小，执行速度比递归快。所以讨论是否所有递归都可以以及如何转化成迭代是一个热门的话题。 递归必须将消息（结果）传回调用者， 而迭代则完全不需要。</p>
<p>从编译器的角度来看，实际上递归的文法是正则文法，而迭代的文法是上下文无关文法，后者的表达能力较强。迭代和递归的相互转换涉及到图灵完备性问题，即你要用迭代来代替递归的话有时必须要手工维护一个递归数据结构。处理上下文无关文法的下推自动机就是比处理正则文法的有限状态自动机多了一个栈，而递归自然将这个数据结构隐藏在了调用栈之中，所以它是一种更高级的抽象手段，相应的效率较低，并且有 stack overflow 的风险。所以，在不使用递归数据结构的情况下，是无法完成这一转化的。</p>
<h2 id="u5C3E_u9012_u5F52"><a href="#u5C3E_u9012_u5F52" class="headerlink" title="尾递归"></a>尾递归</h2><p>如果在程序结束时只有递归调用的话，就是尾递归，它是很容易转换成迭代的。在scheme等lisp语言中，迭代结构正是通过尾递归表示。ECMAScript 6中明确要求尾递归优化，其它语言比如C，Python编译器不一定会做。并不是所有的递归都可以转成尾递归，比如二叉树的遍历。</p>
<p>但是像上面给出的递归例子，只需保存递归时的状态信息，就可以完成转换，注意在迭代条件不满足时返回结果。约瑟夫问题的递归中变化的只有n和求得的值，转换成迭代就是：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">josephus-iter</span> n val)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> val)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">remainder</span> n <span class="number">2</span>)</span> <span class="number">0</span>)</span> <span class="list">(<span class="keyword">josephus-iter</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span> <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">*</span> val <span class="number">2</span>)</span> <span class="number">1</span>)</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">else</span> <span class="list">(<span class="keyword">josephus-iter</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="number">2</span>)</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> val <span class="number">2</span>)</span> <span class="number">1</span>)</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">josephus</span> n)</span></span><br><span class="line">  <span class="list">(<span class="keyword">josephus-iter</span> n <span class="number">1</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>而Fibonacci数列需要维持的是计算次数count，使用两个整数a，b：a&lt;-a+b，b&lt;-a 即可计算：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fib-iter</span> a b count)</span></span><br><span class="line">	<span class="list">(<span class="keyword">if</span> <span class="list">(<span class="keyword">=</span> count <span class="number">0</span>)</span> </span><br><span class="line">		b</span><br><span class="line">		<span class="list">(<span class="keyword">fib-iter</span> <span class="list">(<span class="keyword">+</span> a b)</span> a <span class="list">(<span class="keyword">-</span> count <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">define</span> <span class="list">(<span class="keyword">fib</span> n)</span></span><br><span class="line">	<span class="list">(<span class="keyword">fib-iter</span> <span class="number">1</span> <span class="number">0</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>一般递归调用是递推阶段栈帧依次入栈，回归阶段依次出栈。但是尾递归由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录取代外层函数的调用记录就可以了。</p>
<h2 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>SICP</li>
<li>Parsing Techniques</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<!-- TOC -->
<p>递归到迭代的转化是计算机科学中的一个经典问题，本篇文章简单讨论了是否所有递归都可以转化成迭代，给出了递归向迭代转化的基本方法。并介绍了尾递归，它作为一种特殊形式的递归，许多编译器将其优化为迭代。</p>]]>
    
    </summary>
    
      <category term="递归" scheme="http://blog.carpela.me/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="函数式编程" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[约瑟夫问题：递归的角度]]></title>
    <link href="http://blog.carpela.me/2016/02/22/josephus-problem-and-recursion/"/>
    <id>http://blog.carpela.me/2016/02/22/josephus-problem-and-recursion/</id>
    <published>2016-02-22T14:01:26.000Z</published>
    <updated>2016-03-01T15:44:08.000Z</updated>
    <content type="html"><![CDATA[<!-- TOC -->
<p>约瑟夫问题(The Josephus Problem)是计算机科学中一个经典问题，编程语言教学中它经常作为练习题。虽然司空见惯，背后却隐藏着玄机。它又如何与进位制转换扯上关系呢？本篇文章从递归的角度来重新解析这个流传近2000年的老问题，并提出一类递推式的快速解法。</p>
<a id="more"></a>
<h2 id="u95EE_u9898_u5B9A_u4E49"><a href="#u95EE_u9898_u5B9A_u4E49" class="headerlink" title="问题定义"></a>问题定义</h2><p>经典的约瑟夫问题定义如下：</p>
<pre><code>有n个人，标号为 1 ~ n，从n开始，每隔一个人死于非命，求幸存者编号J(n)
</code></pre><p>问题很简洁。它的背景是犹太罗马战争时期，有兴趣者移步。举个简单的例子，假如 n = 10，那么：</p>
<ul>
<li>第一轮淘汰：2 4 6 8 10 死于非命，剩下 1 3 5 7 9 开始新的一轮淘汰</li>
<li>第二轮淘汰：3 7 死于非命，剩下 1 5 9 继续</li>
<li>第三轮淘汰：1 9 死于非命，剩下 5 </li>
<li>Game over</li>
</ul>
<p>可以发现，每一轮淘汰后（n个人），下一轮实际参与人只有 n/2。它的结果是和 J(n/2) 是同一个人，仅仅标号不同而已，而标号之间存在对应关系。上面的例子是偶数个人，以奇数个人试一试会有同样的发现。</p>
<h2 id="u95EE_u9898_u6C42_u89E3"><a href="#u95EE_u9898_u6C42_u89E3" class="headerlink" title="问题求解"></a>问题求解</h2><p>这个问题的暴力解法是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *flag;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">// 查找当前元素cur隔一个的活人</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> cur)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="comment">// 跳过所有的死人，得到接下来的活人</span></span><br><span class="line">  <span class="keyword">while</span>(!flag[ ++cur % n]);</span><br><span class="line">  <span class="comment">// 跳过得到活人后面的所有死人，得到隔一个的活人</span></span><br><span class="line">  <span class="keyword">while</span>(!flag[ ++cur % n]);</span><br><span class="line">  <span class="keyword">return</span> cur % n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please input the number:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">" %d"</span>, &amp;n);</span><br><span class="line">  flag = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*n);</span><br><span class="line">  <span class="comment">// 初始为活</span></span><br><span class="line">  <span class="built_in">memset</span>(flag, <span class="number">1</span>, n);</span><br><span class="line">  <span class="comment">// 死 n－1 个人</span></span><br><span class="line">  <span class="keyword">int</span> dead, cur = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(dead=<span class="number">0</span>; dead &lt; n ; dead++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = next(cur);</span><br><span class="line">    flag[tmp] = <span class="number">0</span>;</span><br><span class="line">    cur = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(flag);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Alive: %d\n"</span>, cur == <span class="number">0</span>? n:cur);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的思路很简单，使用数组模拟人的死亡，下标为0的元素表示n号对应的人，由于这n个人形成的是环，这样做是可以的。这段代码看注释容易明白。当然还可以使用循环队列来解决问题，这样更直观，但效率相对较低。</p>
<p>这种解法却没有利用到上面提到的规律，进一步发掘那个规律，J(10)第一轮剩下的五个人相当于J(5)重新编号，而且是 </p>
<pre><code>J(10)站在同一位置的编号 = J(5)对应的编号*2 - 1
</code></pre><p>同理 J(5)第一轮剩下的两个人相当于J(2)重新编号：</p>
<pre><code>J(5)站在同一位置的编号 = J(2)对应的编号*2 + 1
</code></pre><p>即存在以下递归关系：</p>
<pre><code>J(1) = 1;
J(2n) = 2J(n) - 1    n≥1;
J(2n+1) = 2J(n) + 1    n≥1;
</code></pre><p>这个递推式按照指数形式缩减n，但是这种形式不便于计算，我们需要找到一种封闭的形式，通常可以看到更多的信息。</p>
<p>这个解答使用 Common Lisp 描述如下：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">format</span> <span class="literal">t</span> <span class="string">"Please input the number: "</span>)</span></span><br><span class="line"><span class="list">(<span class="keyword">setf</span> n <span class="list">(<span class="keyword">read</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> josephus <span class="list">(<span class="keyword">n</span>)</span></span><br><span class="line">  <span class="list">(<span class="keyword">cond</span> <span class="list">(<span class="list">(<span class="keyword">=</span> n <span class="number">1</span>)</span> <span class="number">1</span>)</span></span><br><span class="line">    <span class="list">(<span class="list">(<span class="keyword">=</span> <span class="list">(<span class="keyword">mod</span> n <span class="number">2</span>)</span> <span class="number">0</span>)</span></span><br><span class="line">        <span class="list">(<span class="keyword">-</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">josephus</span> <span class="list">(<span class="keyword">/</span> n <span class="number">2</span>)</span>)</span>)</span> <span class="number">1</span>)</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">t</span> <span class="list">(<span class="keyword">+</span> <span class="list">(<span class="keyword">*</span> <span class="number">2</span> <span class="list">(<span class="keyword">josephus</span> <span class="list">(<span class="keyword">/</span> <span class="list">(<span class="keyword">-</span> n <span class="number">1</span>)</span> <span class="number">2</span>)</span>)</span>)</span> <span class="number">1</span>)</span>)</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">format</span> <span class="literal">t</span> <span class="string">"Alive: ~A~%"</span> <span class="list">(<span class="keyword">josephus</span> n)</span>)</span></span><br></pre></td></tr></table></figure>
<p>下面这个式子是显而易见的：</p>
<pre><code>J(2n+1) - J(2n) = 2;
</code></pre><p>使用这个递推关系或者上面的程序可以得出下面这张表：</p>
<table>
<thead>
<tr>
<th>n</th>
<th>1</th>
<th>.</th>
<th>2</th>
<th>3</th>
<th>.</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>.</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>.</th>
<th>16</th>
</tr>
</thead>
<tbody>
<tr>
<td>J(n)</td>
<td>1</td>
<td>.</td>
<td>1</td>
<td>3</td>
<td>.</td>
<td>1</td>
<td>3</td>
<td>5</td>
<td>7</td>
<td>.</td>
<td>1</td>
<td>3</td>
<td>5</td>
<td>7</td>
<td>9</td>
<td>11</td>
<td>13</td>
<td>15</td>
<td>.</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>尤里卡！按照上面的分组，每一组的J(n)都是从1开始，依次递增2。可以用以下的形式改写上述递推式：</p>
<pre><code>J(2^m + l) = 2l + 1;
</code></pre><p>其中 2^m + l = n，2^m 是不超过n的2的最大次幂，l是余下的数。这个结论使用数学归纳法很容易证明。有了这个式子，无需递归就可以线性时间解决这个问题。</p>
<h2 id="u9012_u63A8_u5F0F_u4E0E_u8FDB_u4F4D_u5236"><a href="#u9012_u63A8_u5F0F_u4E0E_u8FDB_u4F4D_u5236" class="headerlink" title="递推式与进位制"></a>递推式与进位制</h2><p>上述递推式涉及到2的次幂，很容易联想到二进制。如果令：</p>
<pre><code>n (radix 10) = AmAm-1...A0 (radix 2)
n = Am * 2^m + Am-1 * 2^m-1 + ... + A0
</code></pre><p>那么：</p>
<pre><code>Am = 1
l = Am-1 * 2^m-1 + ... + A0

J(n) = 2*(Am-1 * 2^m-1 + ... + A0) + 1
     = Am-1 * 2^m + ... + A0 * 2 + 1
     = Am-1Am-2...A0Am (radix 2)
</code></pre><p>好了，一个很明显的规律浮现了：</p>
<pre><code>J(n) = n对应二进制数循环左移一位
</code></pre><p>验证一下：</p>
<pre><code>J(10) = J(1010 (radix 2)) = 101 (radix 2) = 5
J(15) = J(1111 (radix 2)) = 1111 (radix 2) = 15
</code></pre><p>好了，虽然同为线性时间，但这个解比上一个解更加简洁，效率稍微高一点。</p>
<h2 id="u95EE_u9898_u63A8_u5E7F"><a href="#u95EE_u9898_u63A8_u5E7F" class="headerlink" title="问题推广"></a>问题推广</h2><p>上述问题描述的是每两个人有一个人死于非命，推广成一般情形：每隔a个人有一个人死于非命。那么上述递推式的形式转换成：</p>
<pre><code>J(1) = a
J(2) = b
...
J(n-1) = c

J(an) = a * J(n) + x
...
J(an + (a-1)) = a * J(n) + z
</code></pre><p>我们猜测J(n)与a进制有对应的关系。将n表示为n进制数：</p>
<pre><code>n = Am * a^m + ... + A1 * a + A0
</code></pre><ul>
<li>n / a 以后余数 A0，使用 J(an+A0) 与 J(n) 关系的递推式。</li>
<li>n / a / a 以后余数 A1，使用 J(an+A1) 与 J(n) 关系的递推式。</li>
<li>依次类推…</li>
<li>n / a^m 以后，只剩下余数l，这时递推式结束，结果是 J(l) 对应的值。</li>
</ul>
<p>上述过程需要好好理解。重新整理上述过程，将它们联系起来，可以发现：</p>
<pre><code>J(an+A0) 与 J(n) 关系的递推式常量值需乘以 3^0，J(an+A1) 与 J(n) 关系的递推式常量值需乘以 3^1，...，J(an+Am-1) 与 J(n) 关系的递推式常量值需乘以 3^m-1，J(l)需乘以 3^m。
</code></pre><p>也就是说，除了最高位，其它位都是选择递推式的常量值，最高位选择初始值。然后相加即为结果。</p>
<p>描述太过抽象，举个简单的例子：</p>
<pre><code>J(1) = 4
J(2) = 8
J(3n) = 3J(n) - 1
J(3n+1) = 3J(n) + 4
J(3n+2) = 3J(n) + 5
求J(101)
</code></pre><p>使用上述结论：</p>
<pre><code>J(101) = J(10202 (radix 3)) = 4*3^4 - 1*3^3 + 5*3^2 -1*3^1 + 5 = 344
</code></pre><p>验证一下：</p>
<pre><code>J(101) = J(3*33+2) 
        = 3*J(33) + 5 
        = 3*J(3*11) + 5 
        = 3*(3*J(11) - 1) + 5 
        = 3*(3*J(3*3+2) - 1) + 5 
        = 3*(3*(3*J(3)+5) - 1) + 5 
        = 3*(3*(3*(3*J(1) - 1)+5) - 1) + 5 
        = 3*(3*(3*(3*4 - 1)+5) - 1) + 5 
        = 344
</code></pre><p>bingo！好了，此类递归式以后可以很容易求解了。</p>
<h2 id="u91CD_u65B0_u5BA1_u89C6"><a href="#u91CD_u65B0_u5BA1_u89C6" class="headerlink" title="重新审视"></a>重新审视</h2><p>上述一般的规律，实际上就是对递推式求解过程的重新编码，利用进位制转换关系，简化了求解过程。显然利用递归使用原递推式编程实现是很简单的，但效率不高。</p>
<p>一般的规律当然适用于特殊的二进制，但是我们在问题求解中得到的结论却是另一种，我们来重新审视一下：</p>
<pre><code>n = Am*2^m +...+ A0
</code></pre><p>利用上述规律，n展开后，当某一位为0时替换成－1，为1时不变。即：</p>
<pre><code>n对应的二进制 － n按位取反
</code></pre><p>也就是说，<code>n循环左移一位的值</code>和<code>n对应的二进制数</code> － <code>n按位取反后的二进制数</code>是相等的。</p>
<p>拿J(10)验证一下：</p>
<pre><code>1011 - 100 = 111
1010 - 101 = 101
...
</code></pre><p>小小的问题中竟然隐藏着这么多的奥秘！如此简洁的解答体现出数学之美！</p>
<h2 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h2><p>本篇文章问题推广以前部分详细描述可见其第一章，受启发于参考文献,问题推广及以后部分为自由发挥，如有问题请指正。</p>
<h2 id="u53C2_u8003_u6587_u732E"><a href="#u53C2_u8003_u6587_u732E" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>Concrete Mathematics: A Fundation for Computer Science<br>  <strong><em>Ronald L. Graham, Donald E. Knuth, Oren Patashnik</em></strong></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<!-- TOC -->
<p>约瑟夫问题(The Josephus Problem)是计算机科学中一个经典问题，编程语言教学中它经常作为练习题。虽然司空见惯，背后却隐藏着玄机。它又如何与进位制转换扯上关系呢？本篇文章从递归的角度来重新解析这个流传近2000年的老问题，并提出一类递推式的快速解法。</p>]]>
    
    </summary>
    
      <category term="约瑟夫问题" scheme="http://blog.carpela.me/tags/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    
      <category term="递归" scheme="http://blog.carpela.me/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="计算机科学" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="数学之美" scheme="http://blog.carpela.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客变迁之路]]></title>
    <link href="http://blog.carpela.me/2016/01/21/about-my-blog/"/>
    <id>http://blog.carpela.me/2016/01/21/about-my-blog/</id>
    <published>2016-01-20T16:11:26.000Z</published>
    <updated>2016-01-20T17:51:56.000Z</updated>
    <content type="html"><![CDATA[<p>早在2014年10月，我就利用Jekyll在Github上搭起了自己的博客，也写不少东西，然而经过数次变故，博文一篇都没留下，其中很大一部分原因是觉得写的博文质量不高。写博客是个好习惯，学习的同时，记录见解，与诸君分享，加深理解。于是乎，用心写作，从头开始，以此文作为博客新的开端。</p>
<a id="more"></a>
<h2 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h2><p>我虽不是个Rubyer，但刚接触Jekyll，我便顶着官网的英文文档理解它的原理，同时学习Liquid模版语言的使用。我有一定的Web开发基础，用过别的模板语言，所以这个过程还算顺利。那时做的一个东西用到了Bootstrap，于是乎，博客1.0是在Jekyll-Bootstrap的基础上改出来的，J.B. 没有什么好的主题，我也就被迫写着各种Javascript，HTML，CSS。虽不是专业前端，但要搞一个漂亮的博客，我的那些知识还是够用的。</p>
<p>当时的博客背景是竹子，看起来很清新。左边是用喜欢的英文字体写的个人信息，而且使用JQuery加上触发器的原理搞了一个浮动效果：半透明的圆角矩形框的文章列表下拉超过窗口高度的一半时，信息栏便会滚动到另一个位置固定(JQuery的动画)；拉回页面顶端，信息栏以同样的速度回到原来的位置。每次打开自己的博客我都要来滑几个来回，来当做一种消遣。想想也是无聊。页面的半透明效果和背景真的很搭，整个博客有矩形的地方都弄成圆角。首页文章列表还有隐隐约约的阴影，看起来相当nice。</p>
<p>这个是所有版本里定制程度最高的，有上百次的commit记录，有同学说它很文艺。当时里面就只有四篇关于Linux内核及内核模块网络通信的博客和一篇抒发感情的文章，这几篇文章是用心的写。在用大屏显示器看它之前，我都没想过要换其它主题。一次偶然，发现背景图片在21英尺显示器上有点小，找不到相同的大图，小图拉伸以后不好看。再加上碰到一个主题不错，就换了。</p>
<h2 id="v2-0"><a href="#v2-0" class="headerlink" title="v2.0"></a>v2.0</h2><p>这次使用的是<a href="https://github.com/iHavee/iHavee.github.io" target="_blank" rel="external">iHavee</a>的主题，点击去<a href="http://ihavee.github.io/" target="_blank" rel="external">预览</a>。</p>
<p>在它基础上大致改了一下，修改了分页的位置，模块的位置，首页文章标题下显示的内容等，都是一些小的改动。这个主题总体来说不错，但是有点花哨，当时又在学很多东西，然后博客里面记录了许多算是wiki的东西，只顾着学而没有回头整理，使得博客的内容看起来有点乱。</p>
<p>这个时候想把博客迁到自己在Digital Ocean的VPS上，改用WordPress，但是看着乱乱的内容便没动，最后在VPS上建了个个人主页。</p>
<h2 id="v3-0"><a href="#v3-0" class="headerlink" title="v3.0"></a>v3.0</h2><p>过了一段时间，想打理博客了，找了一个简洁的主题<a href="https://github.com/muan/scribble" target="_blank" rel="external">Scribble</a>，给它加上了Katex支持，通过post页首的yaml属性tex值判断是否开启。然后在这个主题下开了另外一个版块，将所有的post过滤为两部分，一部分是计算机相关，另一部分是生活杂记。这时候发现以前写的文章很多内容都是在别的地方可以找到的，自己的独特思考不多，于是都被删掉了。同时萌生了建一个wiki的想法。</p>
<p>用着用着，发现Katex（包括MathJax）不是太好用，一些数学公式比如有case的无法解析，一篇关于递归问题求解，几种递推公式和进制转换之间联系的博客被搁置，还有一部分原因是在钻研SICP，准备更加深入理解这个问题后再操笔。</p>
<p>当看到有一同学的博客使用这个主题，心里隐隐的有种能换就换的冲动。</p>
<h2 id="v4-0"><a href="#v4-0" class="headerlink" title="v4.0"></a>v4.0</h2><p>在微博大V 网络冷眼的推送中，看到一个程序员写的知识管理的文章，他用 simiki 这个工具来管理那些碎片知识。我立马就把自己的wiki建了起来，放在Github的项目gh-pages分支。</p>
<p>在这之前，看到别人使用 hexo 搭建博客，性能不错，插件很多，主题也比较新，并且一直在更新。看到了一款喜欢的主题：<a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" target="_blank" rel="external">Tranquilpeak</a> ，于是使用了一年多的Jekyll被抛弃，乘上了hexo的快船。</p>
<p>最终，<a href="http://wiki.carpela.me" target="_blank" rel="external">Wiki</a> 和 <a href="http://blog.carpela.me">Blog</a> 的格局形成。</p>
<p>好好写作吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>早在2014年10月，我就利用Jekyll在Github上搭起了自己的博客，也写不少东西，然而经过数次变故，博文一篇都没留下，其中很大一部分原因是觉得写的博文质量不高。写博客是个好习惯，学习的同时，记录见解，与诸君分享，加深理解。于是乎，用心写作，从头开始，以此文作为博客新的开端。</p>]]>
    
    </summary>
    
      <category term="流水帐" scheme="http://blog.carpela.me/tags/%E6%B5%81%E6%B0%B4%E5%B8%90/"/>
    
      <category term="杂记" scheme="http://blog.carpela.me/categories/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
